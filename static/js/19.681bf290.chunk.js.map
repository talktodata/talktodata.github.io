{"version":3,"sources":["constant/FactType.js","constant/ChartType.js","constant/FieldType.js","tool/fact2vis/getSuitableBreakdownList.js","tool/fact2vis/datafilter.js","tool/fact2vis/helper.js","tool/fact2vis/fact2visAllRule.js","tool/fact2vis/fact2visRule.js","tool/fact2vis/getSupportedChartTypes.js","tool/fact2vis/Chart.js","tool/fact2vis/fact2vis.js","pages/EditPage/Dashboard/Layout/ChartCard/CalliopeChart.js"],"names":["VALUE","TREND","CATEGORIZATION","DIFFERENCE","PROPORTION","DISTRIBUTION","RANK","ASSOCIATION","EXTREME","OUTLIER","JUXTAPOSITION","AREA_CHART","VERTICAL_BAR_CHART","VERTICAL_DIFFERENCE_BAR_CHART","VERTICAL_DIFFERENCE_ARROW_CHART","HORIZONTAL_BAR_CHART","PROGRESS_BAR_CHART","STACKED_BAR_CHART","ISOTYPE_BAR_CHART","PROPORTION_ISOTYPE_CHART","COLOR_FILLING_MAP","BUBBLE_CHART","TEXT_CHART","LINE_CHART","STACKED_LINE_CHART","RING_CHART","HALF_RING_CHART","PIE_CHART","SCATTER_PLOT","TREE_MAP","BUBBLE_MAP","NUMERICAL","CATEGORICAL","TEMPORAL","GEOGRAPHICAL","getSuitableBreakdownList","factType","chartType","schema","suitableBreakdownList","fact2visAllRules","filter","x","fact","chart","length","breakdownSets","Set","forEach","breakdownType","type","add","breakdownList","Array","from","s","indexOf","datafilter","data","subspace","filteredData","sub","field","value","isValid","FactType","measure","groupby","focus","customizeFact","newFact","Object","assign","groupbyList","measureList","key","push","gbValueList","getFieldValue","encoding","aggregate","aggregatedRows","getAggregatedRows","measureField","max","reduce","a","b","extremeFocus","extremeValue","newOrder","sort","y","map","d","newOrderValue","n","posQ3","parseInt","posQ1","decimalQ3","decimalQ1","Q3","Q1","Low","Up","outlierIndex","i","groupbyFieldList","getMaxRows","rawData","d3","entries","index","values","aggregation","calculateData","sumData","fill","sumRows","getSumRows","getAverageRows","getMinRows","countData","countRows","getCountRows","fieldName","ChartType","FieldType","fact2visRules","getSupportedChartTypes","supportedChartTypes","isEdit","breakDown","rules","rang","Chart","id","this","props","spec","container","autovis","AutoVis","load","generate","preProps","size","vega_w","width","height","style","display","alignItems","justifyContent","visibility","Component","getChoice","Math","round","random","getFactChartType","shema","getvischartype","fact2chart","specData","containerId","vegalite","console","log","specChart","duration","showSuggestion","specNew","_","cloneDeep","CalliopeChart","shouldRender","getSize"],"mappings":"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","file":"static/js/19.681bf290.chunk.js","sourcesContent":["export default {\n    VALUE: 'value',\n    TREND: 'trend',\n    CATEGORIZATION: 'categorization',\n    DIFFERENCE: 'difference',\n    PROPORTION: 'proportion',\n    DISTRIBUTION: 'distribution',\n    RANK: 'rank',\n    ASSOCIATION: 'association',\n    EXTREME: 'extreme',\n    OUTLIER: 'outlier'\n}","export default {\n    JUXTAPOSITION: 'juxtaposition',\n    AREA_CHART: 'Area Chart',\n    VERTICAL_BAR_CHART: 'Vertical Bar Chart',\n    VERTICAL_DIFFERENCE_BAR_CHART: 'Vertical Difference Bar Chart',\n    VERTICAL_DIFFERENCE_ARROW_CHART: 'Vertical Difference Arrow Chart',\n    HORIZONTAL_BAR_CHART: 'Horizontal Bar Chart',\n    PROGRESS_BAR_CHART: 'Progress Bar Chart',\n    STACKED_BAR_CHART: 'Stacked Bar Chart',\n    ISOTYPE_BAR_CHART: 'Isotype Bar Chart',\n    PROPORTION_ISOTYPE_CHART: 'Proportion Isotype Chart',\n    COLOR_FILLING_MAP: 'Color Filling Map',\n    BUBBLE_CHART: 'Bubble Chart',\n    TEXT_CHART: 'Text Chart',\n    LINE_CHART: 'Line Chart',\n    STACKED_LINE_CHART: 'Stacked Line Chart',\n    RING_CHART: 'Ring Chart',\n    HALF_RING_CHART: 'Half Ring Chart',\n    PIE_CHART: 'Pie Chart',\n    SCATTER_PLOT: 'Scatter Plot',\n    TREE_MAP: 'Treemap',\n    BUBBLE_MAP: 'Bubblemap'\n}","export default {\n    NUMERICAL: 'numerical',\n    CATEGORICAL: 'categorical',\n    TEMPORAL: 'temporal',\n    GEOGRAPHICAL: 'geographical',\n}","import { fact2visAllRules } from './fact2visAllRule';\n\nconst getSuitableBreakdownList = (factType, chartType, schema) => {\n    //acording to factType ---> filter\n    let suitableBreakdownList = fact2visAllRules.filter(x => x.fact === factType);\n\n    //if has choosed chartType ---> filter\n    if (chartType) {\n        suitableBreakdownList = suitableBreakdownList.filter(x => x.chart === chartType);\n    }\n    if (suitableBreakdownList.length === 0) return [];\n    let breakdownSets = new Set();\n    suitableBreakdownList.forEach(x => {\n        x.breakdownType.forEach(type => {\n            breakdownSets.add(type)\n        })\n    })\n    let breakdownList = Array.from(breakdownSets);\n    //console.log(\"suitableBreakdownList\", breakdownList)\n    let suitableSchema = schema.filter(s => {\n        return breakdownList.indexOf(s.type) !== -1\n    })\n    // suitableSchema = suitableSchema.map(shema => {\n    //     return shema.field\n    // })\n    //console.log(\"suitableSchema\", suitableSchema)\n    return suitableSchema;\n};\nexport default getSuitableBreakdownList;","const datafilter = (data, subspace) => {\n    let filteredData = data;\n    for (const sub of subspace) {\n        filteredData = filteredData.filter((x)=>x[sub.field]===sub.value)\n    }\n    return filteredData\n}\n\nexport default datafilter;","import FactType from '@/constant/FactType'\nimport getSuitableBreakdownList from './getSuitableBreakdownList';\nimport datafilter from './datafilter';\nimport * as d3 from 'd3';\n// import _ from 'lodash';\n\n// chart valid\nexport const isValid = function (fact) {\n    let isValid = false;\n    switch (fact.type) {\n        case FactType.ASSOCIATION:\n            if (fact.measure.length === 2)\n                isValid = true\n            break;\n\n        case FactType.CATEGORIZATION:\n            if (fact.groupby.length)\n                isValid = true\n            break;\n\n        case FactType.DIFFERENCE:\n            if (fact.measure.length && fact.groupby.length && fact.focus.length >= 2)\n                isValid = true\n            break;\n\n        case FactType.DISTRIBUTION:\n            if (fact.measure.length && fact.groupby.length)\n                isValid = true\n            break;\n\n        case FactType.EXTREME:\n            if (fact.measure.length && fact.groupby.length && fact.focus.length)\n                isValid = true\n            break;\n\n        case FactType.OUTLIER:\n            if (fact.measure.length && fact.groupby.length && fact.focus.length)\n                isValid = true\n            break;\n\n        case FactType.PROPORTION:\n            if (fact.measure.length && fact.groupby.length && fact.focus.length)\n                isValid = true\n            break;\n\n        case FactType.RANK:\n            if (fact.measure.length && fact.groupby.length)\n                isValid = true\n            break;\n\n        case FactType.TREND:\n            if (fact.measure.length && fact.groupby.length)\n                isValid = true\n            break;\n\n        case FactType.VALUE:\n            if (fact.measure.length)\n                isValid = true\n            break;\n\n        default:\n            break;\n    }\n    return isValid\n}\n\n/***\n * 清空不必要的fact属性\n ***/\nexport const customizeFact = function (fact, schema, data) {\n    let newFact = Object.assign({}, fact)\n    switch (fact.type) {\n        case FactType.ASSOCIATION:\n            newFact.focus = [];\n            if (schema && data) {\n                const groupbyList = getSuitableBreakdownList(fact.type, fact.chart, schema);\n                if (newFact.groupby.length === 0 && groupbyList.length > 0) {\n                    newFact.groupby = [groupbyList[0].field];\n                }\n                const measureList = schema.filter(key => key['type'] === \"numerical\");\n                if (newFact.measure.length === 0 && measureList.length > 0) {\n                    newFact.measure = [{ \"field\": measureList[0].field, \"aggregate\": \"count\" }];\n                }\n                if (newFact.measure.length === 1) {\n                    newFact.measure.push({ \"field\": 'COUNT', \"aggregate\": \"count\" });\n                }\n            }\n            break;\n\n        case FactType.CATEGORIZATION:\n            newFact.measure = []\n            newFact.focus = []\n            if (schema && data) {\n                const groupbyList = getSuitableBreakdownList(fact.type, fact.chart, schema);\n                if (newFact.groupby.length === 0 && groupbyList.length > 0) {\n                    newFact.groupby = [groupbyList[0].field];\n                }\n            }\n            break;\n\n        case FactType.DIFFERENCE:\n            if (schema && data) {\n                const groupbyList = getSuitableBreakdownList(fact.type, fact.chart, schema),\n                    gbValueList = getFieldValue(data, fact.groupby);\n                if (newFact.groupby.length === 0 && groupbyList.length > 0) {\n                    newFact.groupby = [groupbyList[0].field];\n                }\n                if (newFact.measure.length === 0) {\n                    newFact.measure = [{ \"field\": 'COUNT', \"aggregate\": \"count\" }];\n                }\n                /***** 设默认为第1、2条，并且更新到fact中 *****/\n                if (!newFact.focus.length) {\n                    newFact.focus = [{\n                        field: newFact.groupby[0],\n                        value: gbValueList[0],\n                    },\n                    {\n                        field: newFact.groupby[0],\n                        value: gbValueList[1],\n                    }\n                    ]\n                }\n            }\n            break;\n\n        case FactType.DISTRIBUTION:\n            newFact.focus = []\n            if (schema && data) {\n                const groupbyList = getSuitableBreakdownList(fact.type, fact.chart, schema);\n                if (newFact.groupby.length === 0 && groupbyList.length > 0) {\n                    newFact.groupby = [groupbyList[0].field];\n                }\n                if (newFact.measure.length === 0) {\n                    newFact.measure = [{ \"field\": 'COUNT', \"aggregate\": \"count\" }];\n                }\n            }\n            break;\n\n        case FactType.EXTREME:\n            if (schema && data) {\n                const groupbyList = getSuitableBreakdownList(fact.type, fact.chart, schema);\n                if (newFact.groupby.length === 0 && groupbyList.length > 0) {\n                    newFact.groupby = [groupbyList[0].field];\n                }\n                if (newFact.measure.length === 0) {\n                    newFact.measure = [{ \"field\": 'COUNT', \"aggregate\": \"count\" }];\n                }\n                // aggregation\n                if (newFact.measure.length && newFact.groupby.length) {\n                    let encoding = {}\n                    encoding['y'] = {};\n                    encoding['y']['field'] = newFact.measure[0].field;\n                    encoding['y']['aggregation'] = newFact.measure[0].aggregate;\n                    encoding['x'] = {};\n                    encoding['x']['field'] = newFact.groupby[0];\n                    let filteredData = datafilter(data, newFact.subspace)\n                    let aggregatedRows = getAggregatedRows(filteredData, encoding);\n                    // filter gbValueList\n                    let measureField = newFact.measure[0]['field'];\n                    let max = aggregatedRows.reduce((a, b) => (a[measureField] > b[measureField]) ? a : b);\n\n                    /***** 设默认为max，并且更新到fact中 *****/\n                    if (!newFact.focus.length) {\n                        newFact.focus = [{\n                            field: newFact.groupby[0],\n                            value: max[newFact.groupby[0]],\n                            extremeFocus: 'max',\n                            extremeValue: max[newFact.measure[0].field]\n                        }]\n                    }\n                }\n            }\n            break;\n\n        case FactType.OUTLIER:\n            if (schema && data) {\n                const groupbyList = getSuitableBreakdownList(fact.type, fact.chart, schema);\n                if (newFact.groupby.length === 0 && groupbyList.length > 0) {\n                    newFact.groupby = [groupbyList[0].field];\n                }\n                if (newFact.measure.length === 0) {\n                    newFact.measure = [{ \"field\": 'COUNT', \"aggregate\": \"count\" }];\n                }\n                // aggregation\n                if (newFact.measure.length && newFact.groupby.length) {\n                    let encoding = {}\n                    encoding['y'] = {};\n                    encoding['y']['field'] = newFact.measure[0].field;\n                    encoding['y']['aggregation'] = newFact.measure[0].aggregate;\n                    encoding['x'] = {};\n                    encoding['x']['field'] = newFact.groupby[0];\n                    let filteredData = datafilter(data, newFact.subspace)\n                    let aggregatedRows = getAggregatedRows(filteredData, encoding);\n                    // filter gbValueList\n                    let newOrder = aggregatedRows.sort(function (a, b) { return b[encoding.y.field] - a[encoding.y.field]; }).map(function (d) { return d[encoding.x.field]; })\n                    let newOrderValue = aggregatedRows.sort(function (a, b) { return b[encoding.y.field] - a[encoding.y.field]; }).map(function (d) { return d[encoding.y.field]; })\n\n                    let n = newOrderValue.length\n                    // 整数部分\n                    let posQ3 = parseInt((n - 1) * 0.25)\n                    let posQ1 = parseInt((n - 1) * 0.75)\n                    // 小数部分\n                    let decimalQ3 = (n - 1) * 0.25 - posQ3\n                    let decimalQ1 = (n - 1) * 0.75 - posQ1\n                    let Q3 = newOrderValue[posQ3] + (newOrderValue[posQ3 + 1] - newOrderValue[posQ3]) * decimalQ3\n                    let Q1 = newOrderValue[posQ1] + (newOrderValue[posQ1 + 1] - newOrderValue[posQ1]) * decimalQ1\n\n                    let Low = Q1 - 1.5 * (Q3 - Q1)\n                    let Up = Q3 + 1.5 * (Q3 - Q1)\n                    let outlierIndex = []\n                    newOrderValue.forEach((d, i) => {\n                        if (d > Up || d < Low) {\n                            outlierIndex.push(i)\n                        }\n                    });\n\n                    /***** 设默认为outlier，并且更新到fact中 *****/\n                    if (!newFact.focus.length && outlierIndex.length) {\n                        newFact.focus = [{\n                            field: fact.groupby[0],\n                            value: newOrder[outlierIndex[0]],\n                        }]\n                    }\n                }\n            }\n            break;\n\n        case FactType.PROPORTION:\n            if (schema && data) {\n                const groupbyList = getSuitableBreakdownList(fact.type, fact.chart, schema);\n                if (newFact.groupby.length === 0 && groupbyList.length > 0) {\n                    newFact.groupby = [groupbyList[0].field];\n                }\n\n                if (newFact.measure.length === 0) {\n                    newFact.measure = [{ \"field\": 'COUNT', \"aggregate\": \"count\" }];\n                }\n                if (newFact.measure.length && newFact.groupby.length) {\n                    // aggregation\n                    let encoding = {}\n                    encoding['y'] = {};\n                    encoding['y']['field'] = newFact.measure[0].field;\n                    encoding['y']['aggregation'] = newFact.measure[0].aggregate;\n                    encoding['x'] = {};\n                    encoding['x']['field'] = newFact.groupby[0];\n                    let filteredData = datafilter(data, newFact.subspace)\n                    let aggregatedRows = getAggregatedRows(filteredData, encoding);\n                    // filter gbValueList\n                    let measureField = newFact.measure[0]['field'];\n                    let max = aggregatedRows.reduce((a, b) => (a[measureField] > b[measureField]) ? a : b)\n\n                    /***** 设默认为max，并且更新到fact中 *****/\n                    if (!newFact.focus.length) {\n                        newFact.focus = [{\n                            field: newFact.groupby[0],\n                            value: max[newFact.groupby[0]],\n                        }]\n                    }\n                }\n            }\n            break;\n\n        case FactType.RANK:\n            newFact.focus = []\n            if (schema && data) {\n                const groupbyList = getSuitableBreakdownList(newFact.type, newFact.chart, schema);\n                if (newFact.groupby.length === 0 && groupbyList.length > 0) {\n                    newFact.groupby = [groupbyList[0].field];\n                }\n                if (newFact.measure.length === 0) {\n                    newFact.measure = [{ \"field\": 'COUNT', \"aggregate\": \"count\" }];\n                }\n                // if (newFact.measure.length && newFact.groupby.length) {\n                //     // aggregation\n                //     let encoding = {}\n                //     encoding['y'] = {};\n                //     encoding['y']['field'] = newFact.measure[0].field;\n                //     encoding['y']['aggregation'] = newFact.measure[0].aggregate;\n                //     encoding['x'] = {};\n                //     encoding['x']['field'] = newFact.groupby[0];\n                //     let filteredData = datafilter(data, newFact.subspace)\n                //     let aggregatedRows = getAggregatedRows(filteredData, encoding);\n                //     // filter gbValueList\n                //     let newOrder = aggregatedRows.sort(function (a, b) { return b[encoding.y.field] - a[encoding.y.field]; }).map(function (d) { return d[encoding.x.field]; })\n\n                //     /***** 设默认为前3，并且更新到fact中 *****/\n\n                //     let focus = []\n                //     newOrder.forEach((d, i) => {\n                //         if (i < 3) {\n                //             focus.push({ field: fact.groupby[0], value: d })\n                //         }\n                //     });\n                //     if(!_.isEqual(focus, newFact.focus)){\n                //         newFact.focus = focus;\n                //     }\n                // }\n            }\n            break;\n\n        case FactType.TREND:\n            newFact.focus = [];\n            if (schema && data) {\n                let groupbyList = schema.filter(key => key['type'] === \"temporal\")\n                const groupbyFieldList = groupbyList.map((d) => d.field);\n                if (groupbyList.length === 0) {\n                    newFact.groupby = []\n                } else if (newFact.groupby.length === 0 || groupbyFieldList.indexOf(newFact.groupby[0]) === -1) {\n                    newFact.groupby = [groupbyList[0].field];\n                }\n\n                if (newFact.measure.length === 0) {\n                    newFact.measure = [{ \"field\": 'COUNT', \"aggregate\": \"count\" }];\n                }\n            }\n            break;\n\n        case FactType.VALUE:\n            newFact.groupby = []\n            newFact.focus = []\n            if (schema && data) {\n                if (newFact.measure.length === 0) {\n                    newFact.measure = [{ \"field\": 'COUNT', \"aggregate\": \"count\" }];\n                }\n            }\n            break;\n\n        default:\n            break;\n    }\n    return newFact\n}\n\n// fact valid for score to update(RANK/PROPORTION/OUTLIER/DIFFERENCE)\n//NO USE FOR A MOMENT!!!!!\nexport const isFactValid = function (_fact) {\n    let fact = Object.assign({}, _fact)\n    let isFactValid = false;\n    switch (fact.type) {\n        case FactType.ASSOCIATION:\n            if (fact.measure.length === 2 && fact.groupby)\n                isFactValid = true\n            break;\n\n        case FactType.CATEGORIZATION:\n            if (fact.groupby)\n                isFactValid = true\n            break;\n\n        case FactType.DIFFERENCE:\n            if (fact.measure && fact.groupby && fact.focus.length >= 2)\n                isFactValid = true\n            break;\n\n        case FactType.DISTRIBUTION:\n            if (fact.measure && fact.groupby)\n                isFactValid = true\n            break;\n\n        case FactType.EXTREME:\n            if (fact.measure && fact.groupby)\n                isFactValid = true\n            break;\n\n        case FactType.OUTLIER:\n            if (fact.measure && fact.groupby && fact.focus.length)\n                isFactValid = true\n            break;\n\n        case FactType.PROPORTION:\n            if (fact.measure && fact.groupby && fact.focus.length)\n                isFactValid = true\n            break;\n\n        case FactType.RANK:\n            if (fact.measure.length && fact.groupby.length && fact.focus.length >= 3)\n                isFactValid = true\n            break;\n\n        case FactType.TREND:\n            if (fact.measure && fact.groupby)\n                isFactValid = true\n            break;\n\n        case FactType.VALUE:\n            if (fact.measure)\n                isFactValid = true\n            break;\n\n        default:\n            break;\n    }\n    return isFactValid\n}\n\nconst getCountRows = (rawData, encoding) => {\n    let calculateData = d3.nest().key(d => d[encoding.x.field]).entries(rawData);\n    let countData = new Array(calculateData.length).fill(0);\n    let data = calculateData.map(function (d, i) {\n        d.values.forEach(() => {\n            countData[i] += 1\n        })\n        let countRows = Object.assign({}, d.values[0])\n        countRows['COUNT'] = countData[i]\n        return countRows\n    });\n    return data;\n}\n\nconst getMinRows = (rawData, encoding) => {\n    let calculateData = d3.nest().key(d => d[encoding.x.field]).entries(rawData);\n    let data = calculateData.map(function (d) {\n        let index = d3.scan(d.values, function (a, b) {\n            if (a[encoding.y.field] && b[encoding.y.field])\n                return a[encoding.y.field] - b[encoding.y.field];\n        });\n        if (index >= 0) {\n            return d.values[index]\n        } else {\n            return d.values[0]\n        }\n    });\n    return data;\n}\n\nconst getMaxRows = (rawData, encoding) => {\n    let calculateData = d3.nest().key(d => d[encoding.x.field]).entries(rawData);\n    let data = calculateData.map(function (d, i) {\n        let index = d3.scan(d.values, function (a, b) {\n            if (a[encoding.y.field] && b[encoding.y.field])\n                return b[encoding.y.field] - a[encoding.y.field];\n        });\n        if (index >= 0) {\n            return d.values[index]\n        } else {\n            return d.values[0];\n        }\n    });\n    return data;\n}\n\nconst getSumRows = (rawData, encoding) => {\n    let calculateData = d3.nest().key(d => d[encoding.x.field]).entries(rawData);\n    let sumData = new Array(calculateData.length).fill(0);\n    let data = calculateData.map(function (d, i) {\n        d.values.forEach(d => {\n            sumData[i] += d[encoding.y.field]\n        })\n        let sumRows = Object.assign({}, d.values[0])\n        sumRows[encoding.y.field] = sumData[i]\n        return sumRows\n    });\n    return data;\n}\n\nconst getAverageRows = (rawData, encoding) => {\n    let calculateData = d3.nest().key(d => d[encoding.x.field]).entries(rawData);\n    let sumData = new Array(calculateData.length).fill(0);\n    let data = calculateData.map(function (d, i) {\n        d.values.forEach(d => {\n            sumData[i] += d[encoding.y.field]\n        })\n        let sumRows = Object.assign({}, d.values[0])\n        sumRows[encoding.y.field] = sumData[i] / d.values.length;\n        return sumRows;\n    });\n    return data;\n}\n\nconst getAggregatedRows = (rawData, encoding) => {\n    let data;\n    switch (encoding.y.aggregation) {\n        case 'sum':\n            data = getSumRows(rawData, encoding);\n            break;\n        case 'avg':\n            data = getAverageRows(rawData, encoding);\n            break;\n        case 'max':\n            data = getMaxRows(rawData, encoding);\n            break;\n        case 'min':\n            data = getMinRows(rawData, encoding);\n            break;\n        case 'count':\n            data = getCountRows(rawData, encoding)\n            break;\n\n        default:\n            data = getMaxRows(rawData, encoding);\n            break;\n    }\n    return data;\n}\n\nconst getFieldValue = (rawData, fieldName) => {\n    if (fieldName)\n        return Array.from(new Set(rawData.map(d => d[fieldName])));\n    else return []\n}","import FactType from '@/constant/FactType';\nimport ChartType from '@/constant/ChartType';\nimport FieldType from '@/constant/FieldType';\n//权重\nexport const fact2visAllRules = [\n    //association \n    {\n        \"fact\": FactType.ASSOCIATION,\n        \"chart\": ChartType.SCATTER_PLOT,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL, FieldType.GEOGRAPHICAL]\n    },\n    //outlier\n    {\n        \"fact\": FactType.OUTLIER,\n        \"chart\": ChartType.VERTICAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL, FieldType.GEOGRAPHICAL],\n        //\"rang\": [0, 9]\n    },\n    {\n        \"fact\": FactType.OUTLIER,\n        \"chart\": ChartType.AREA_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL]\n    },\n    {\n        \"fact\": FactType.OUTLIER,\n        \"chart\": ChartType.LINE_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL]\n    },\n    // {\n    //     \"fact\": FactType.OUTLIER,\n    //     \"chart\": ChartType.BUBBLE_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    //     \"rang\": [6, 9]\n    // },\n    // {\n    //     \"fact\": FactType.OUTLIER,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.OUTLIER,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    //extreme\n    {\n        \"fact\": FactType.EXTREME,\n        \"chart\": ChartType.VERTICAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL, FieldType.GEOGRAPHICAL],\n        //\"rang\": [0, 9]\n    },\n    // {\n    //     \"fact\": FactType.EXTREME,\n    //     \"chart\": ChartType.TEXT_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    // },\n    {\n        \"fact\": FactType.EXTREME,\n        \"chart\": ChartType.LINE_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL],\n    },\n    {\n        \"fact\": FactType.EXTREME,\n        \"chart\": ChartType.AREA_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL],\n    },\n    // {\n    //     \"fact\": FactType.EXTREME,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.EXTREME,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    //proportion\n    {\n        \"fact\": FactType.PROPORTION,\n        \"chart\": ChartType.PROGRESS_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL, FieldType.TEMPORAL],\n    },\n    // {\n    //     \"fact\": FactType.PROPORTION,\n    //     \"chart\": ChartType.TREE_MAP,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    // },\n    // {\n    //     \"fact\": FactType.PROPORTION,\n    //     \"chart\": ChartType.RING_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    // },\n    {\n        \"fact\": FactType.PROPORTION,\n        \"chart\": ChartType.PIE_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL, FieldType.TEMPORAL],\n    },\n    // {\n    //     \"fact\": FactType.PROPORTION,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.PROPORTION,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.PROPORTION,\n    //     \"chart\": ChartType.VERTICAL_BAR_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    //     \"rang\": [0, 9]\n    // },\n\n    //rank\n    {\n        \"fact\": FactType.RANK,\n        \"chart\": ChartType.HORIZONTAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL, FieldType.TEMPORAL],\n    },\n    // {\n    //     \"fact\": FactType.RANK,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.RANK,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.RANK,\n    //     \"chart\": ChartType.LINE_CHART,\n    //     \"breakdownType\": [FieldType.TEMPORAL],\n    // },\n    //distribution\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.BUBBLE_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    // },\n    {\n        \"fact\": FactType.DISTRIBUTION,\n        \"chart\": ChartType.AREA_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL],\n    },\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.TREE_MAP,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    //     \"rang\": [6, 10000]\n    // },\n    {\n        \"fact\": FactType.DISTRIBUTION,\n        \"chart\": ChartType.VERTICAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL],\n        //\"rang\": [0, 9]\n    },\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.HORIZONTAL_BAR_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    // },\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.PIE_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    // },\n    //difference\n    // {\n    //     \"fact\": FactType.DIFFERENCE,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.DIFFERENCE,\n    //     \"chart\": ChartType.VERTICAL_BAR_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    //     // \"rang\": [0, 9]\n    // },\n    // {\n    //     \"fact\": FactType.DIFFERENCE,\n    //     \"chart\": ChartType.TEXT_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    // },\n    // {\n    //     \"fact\": FactType.DIFFERENCE,\n    //     \"chart\": ChartType.PIE_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    // },\n    {\n        \"fact\": FactType.DIFFERENCE,\n        \"chart\": ChartType.HORIZONTAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL, FieldType.TEMPORAL],\n    },\n    // //categorization\n    // {\n    //     \"fact\": FactType.CATEGORIZATION,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.CATEGORIZATION,\n    //     \"chart\": ChartType.TREE_MAP,\n    //     \"breakdownType\": [FieldType.CATEGORICAL],\n    //     \"rang\": [6, 10000]\n    // },\n    {\n        \"fact\": FactType.CATEGORIZATION,\n        \"chart\": ChartType.VERTICAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL],\n       // \"rang\": [0, 9]\n    },\n    // {\n    //     \"fact\": FactType.CATEGORIZATION,\n    //     \"chart\": ChartType.BUBBLE_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL],\n    //     \"rang\": [6, 9]\n    // },\n    //trend\n    {\n        \"fact\": FactType.TREND,\n        \"chart\": ChartType.LINE_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL],\n    },\n    // {\n    //     \"fact\": FactType.TREND,\n    //     \"chart\": ChartType.AREA_CHART,\n    //     \"breakdownType\": [FieldType.TEMPORAL],\n    // },\n    // {\n    //     \"fact\": FactType.TREND,\n    //     \"chart\": ChartType.VERTICAL_BAR_CHART,\n    //     //\"rang\": [0, 9],\n    //     \"breakdownType\": [FieldType.TEMPORAL, FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.TREND,\n    //     \"chart\": ChartType.HORIZONTAL_BAR_CHART,\n    //     \"rang\": [0, 9],\n    //     \"breakdownType\": [FieldType.TEMPORAL],\n    // },\n    // {\n    //     \"fact\": FactType.TREND,\n    //     \"chart\": ChartType.BUBBLE_CHART,\n    //     \"rang\": [6, 9],\n    //     \"breakdownType\": [FieldType.TEMPORAL, FieldType.TEMPORAL],\n    // },\n    // {\n    //     \"fact\": FactType.TREND,\n    //     \"chart\": ChartType.SCATTER_PLOT,\n    //     \"breakdownType\": [FieldType.TEMPORAL],\n    // },\n    //value\n    // {\n    //     \"fact\": FactType.VALUE,\n    //     \"chart\": ChartType.TEXT_CHART,\n    //     \"breakdownType\": [],\n    // },\n    // {\n    //     \"fact\": FactType.VALUE,\n    //     \"chart\": ChartType.HORIZONTAL_BAR_CHART,\n    //     \"breakdownType\": [],\n    // },\n    {\n        \"fact\": FactType.VALUE,\n        \"chart\": ChartType.VERTICAL_BAR_CHART,\n        // \"rang\": [0, 9],\n        //\"breakdownType\": [FieldType.TEMPORAL, FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL],\n    },\n    // {\n    //     \"fact\": FactType.VALUE,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [],\n    // },\n    // {\n    //     \"fact\": FactType.VALUE,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [],\n    // }\n]","import FactType from '@/constant/FactType';\nimport ChartType from '@/constant/ChartType';\nimport FieldType from '@/constant/FieldType';\n//权重\nexport const fact2visRules = [\n    //association \n    {\n        \"fact\": FactType.ASSOCIATION,\n        \"chart\": ChartType.SCATTER_PLOT,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL, FieldType.GEOGRAPHICAL]\n    },\n    //outlier\n    // {\n    //     \"fact\": FactType.OUTLIER,\n    //     \"chart\": ChartType.VERTICAL_BAR_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.CATEGORICAL],\n    //     // \"rang\": [0, 9]\n    // },\n    {\n        \"fact\": FactType.OUTLIER,\n        \"chart\": ChartType.AREA_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL]\n    },\n    {\n        \"fact\": FactType.OUTLIER,\n        \"chart\": ChartType.LINE_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL]\n    },\n    // {\n    //     \"fact\": FactType.OUTLIER,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    //     // \"rang\": [0, 9]\n    // },\n    // {\n    //     \"fact\": FactType.OUTLIER,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    //     // \"rang\": [0, 9]\n    // },\n    // {\n    //     \"fact\": FactType.OUTLIER,\n    //     \"chart\": ChartType.BUBBLE_CHART,\n    // \"rang\": [6, 9]\n    // },\n    //extreme\n    {\n        \"fact\": FactType.EXTREME,\n        \"chart\": ChartType.VERTICAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL],\n        // \"rang\": [0, 9]\n    },\n    // {\n    //     \"fact\": FactType.EXTREME,\n    //     \"chart\": ChartType.TEXT_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL],\n    // },\n    {\n        \"fact\": FactType.EXTREME,\n        \"chart\": ChartType.LINE_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL],\n    },\n    {\n        \"fact\": FactType.EXTREME,\n        \"chart\": ChartType.AREA_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL],\n    },\n    // {\n    //     \"fact\": FactType.EXTREME,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.EXTREME,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    //proportion\n    {\n        \"fact\": FactType.PROPORTION,\n        \"chart\": ChartType.PROGRESS_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL],\n    },\n    // {\n    //     \"fact\": FactType.PROPORTION,\n    //     \"chart\": ChartType.RING_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL],\n    // },\n    {\n        \"fact\": FactType.PROPORTION,\n        \"chart\": ChartType.PIE_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL],\n    },\n    // {\n    //     \"fact\": FactType.PROPORTION,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.PROPORTION,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.PROPORTION,\n    //     \"chart\": ChartType.VERTICAL_BAR_CHART,\n    //\"rang\": [0, 9]\n    // },\n    // {\n    //     \"fact\": FactType.PROPORTION,\n    //     \"chart\": ChartType.TEXT_CHART,\n    // },\n\n    //rank\n    {\n        \"fact\": FactType.RANK,\n        \"chart\": ChartType.HORIZONTAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL],\n    },\n    // {\n    //     \"fact\": FactType.RANK,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.RANK,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.RANK,\n    //     \"chart\": ChartType.LINE_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    // },\n    //distribution\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    {\n        \"fact\": FactType.DISTRIBUTION,\n        \"chart\": ChartType.AREA_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL],\n    },\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.TREE_MAP,\n    //     \"breakdownType\": [FieldType.CATEGORICAL],\n    //     \"rang\": [6, 10000]\n    // },\n    {\n        \"fact\": FactType.DISTRIBUTION,\n        \"chart\": ChartType.VERTICAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL],\n       // \"rang\": [0, 9]\n    },\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.HORIZONTAL_BAR_CHART,\n    // },\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    // },\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.PIE_CHART,\n    // },\n    // //difference\n    // {\n    //     \"fact\": FactType.DIFFERENCE,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.DIFFERENCE,\n    //     \"chart\": ChartType.VERTICAL_BAR_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL],\n    // },\n    // {\n    //     \"fact\": FactType.DIFFERENCE,\n    //     \"chart\": ChartType.TEXT_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL],\n    // },\n    // {\n    //     \"fact\": FactType.DIFFERENCE,\n    //     \"chart\": ChartType.PIE_CHART,\n    // },\n    {\n        \"fact\": FactType.DIFFERENCE,\n        \"chart\": ChartType.HORIZONTAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL,FieldType.TEMPORAL],\n    },\n    //categorization\n    // {\n    //     \"fact\": FactType.CATEGORIZATION,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.CATEGORIZATION,\n    //     \"chart\": ChartType.TREE_MAP,\n    //     \"breakdownType\": [FieldType.CATEGORICAL],\n    //     \"rang\": [6, 10000]\n    // },\n    {\n        \"fact\": FactType.CATEGORIZATION,\n        \"chart\": ChartType.VERTICAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL],\n        //\"rang\": [0, 9]\n    },\n    // {\n    //     \"fact\": FactType.CATEGORIZATION,\n    //     \"chart\": ChartType.BUBBLE_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL],\n    //     \"rang\": [6, 9]\n    // },\n    //trend\n    {\n        \"fact\": FactType.TREND,\n        \"chart\": ChartType.LINE_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL],\n    },\n    // {\n    //     \"fact\": FactType.TREND,\n    //     \"chart\": ChartType.AREA_CHART,\n    //     \"breakdownType\": [FieldType.TEMPORAL],\n    // },\n    // {\n    //     \"fact\": FactType.TREND,\n    //     \"chart\": ChartType.VERTICAL_BAR_CHART,\n    //     \"rang\": [0, 9]\n    // },\n    // {\n    //     \"fact\": FactType.TREND,\n    //     \"chart\": ChartType.BUBBLE_CHART,\n    //\"rang\": [6, 9]\n    // },\n\n    //value\n    // {\n    //     \"fact\": FactType.VALUE,\n    //     \"chart\": ChartType.TEXT_CHART,\n    //     \"breakdownType\": [],\n    // },\n    // {\n    //     \"fact\": FactType.VALUE,\n    //     \"chart\": ChartType.HORIZONTAL_BAR_CHART,\n    // },\n    {\n        \"fact\": FactType.VALUE,\n        \"chart\": ChartType.VERTICAL_BAR_CHART,\n    },\n    // {\n    //     \"fact\": FactType.VALUE,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    // },\n    // {\n    //     \"fact\": FactType.VALUE,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    // }\n]","import {\n    fact2visRules\n} from './fact2visRule';\nimport {\n    fact2visAllRules\n} from './fact2visAllRule';\nimport FieldType from '@/constant/FieldType';\n\n/****\n * 过滤规则： 根据fact.type 和 breakDown.type 筛选支持的图表\n * 其中isEdit===false表示生成阶段，生成阶段优先在推荐规则中过滤，如果找不到，会在全部支持的规则中过滤\n *     isEdit===ture表示编辑阶段，在全部支持的规则中过滤\n */\n\nconst getSupportedChartTypes = (fact, schema, isEdit = false) => {  \n    \n    let breakDown = schema.filter(s => s[\"field\"] === fact.groupby[0])[0];\n    let supportedChartTypes;\n    let rules = isEdit ? fact2visAllRules : fact2visRules;//fact2visRules是推荐规则 \n    supportedChartTypes = rules.filter(x => x.fact === fact.type);\n    if (breakDown) {\n        supportedChartTypes = supportedChartTypes.filter(x => x.breakdownType.indexOf(breakDown.type) !== -1);\n        if (breakDown.type === FieldType.CATEGORICAL && breakDown.values) {\n            supportedChartTypes = supportedChartTypes.filter(x => {\n                if (!x.rang) {\n                    return true\n                } else {\n                    return breakDown.values.length >= x.rang[0] && breakDown.values.length <= x.rang[1]\n                }\n            });\n        }\n        /*******important**** 找不到推荐的图表，就用可以支持的图表显示*****/\n        if (supportedChartTypes.length === 0 && !isEdit) {\n            supportedChartTypes = getSupportedChartTypes(fact, schema, true)\n        }\n        /*******important the end *********/\n    }\n    //console.log(\"supportedChartTypes\", supportedChartTypes)\n    return supportedChartTypes;\n};\nexport default getSupportedChartTypes;","import React, { Component } from 'react';\nimport { AutoVis } from \"calliope-chart\";\n\nexport default class Chart extends Component {\n\n    componentDidMount() {\n        const { id } = this.props.spec.chart;\n        let spec = this.props.spec;\n        let container = id ? `#vischart_${id}` : \"#demo-chart\";\n        this.autovis = new AutoVis();\n        this.autovis = new AutoVis();\n        this.autovis.container(container);\n        this.autovis.load(spec);\n        this.autovis.generate();\n    }\n\n    componentDidUpdate(preProps) {\n        const { id } = this.props.spec.chart;\n        let spec = this.props.spec;\n        let container = id ? `#vischart_${id}` : \"#demo-chart\";\n        this.autovis = new AutoVis();\n        this.autovis = new AutoVis();\n        this.autovis.container(container);\n        this.autovis.load(spec);\n        this.autovis.generate();\n    }\n\n    render() {\n        let height = 640, width = 640;\n        if (this.props.spec.chart) {\n            let { size, type } = this.props.spec.chart;\n            if (type === 'vegalite') {\n                let vega_w = this.props.spec.chart.width,\n                    vega_h = this.props.spec.chart.height;\n                height = vega_h * 0.5\n                width = vega_w * 0.5\n            } else {\n                switch (size) {\n                    case 'wide':\n                        height = 220;\n                        width = 560;\n                        break;\n                    case 'middle':\n                        height = 200;\n                        width = 360;\n                        break;\n                    case 'small':\n                        height = 150;\n                        width = 235;\n                        break;\n\n                    default:\n                        break;\n                }\n            }\n\n        }\n        //console.log(\"render\", width, height);\n        const { id } = this.props.spec.chart ? this.props.spec.chart : { id: \"demo-chart\" };\n        return (\n            // <div id='frame'\n            //     style={{\n            //         // marginLeft: 60,\n            //         // marginTop: 60,\n            //         height: height,\n            //         width: width,\n            //         borderStyle: 'solid',\n            //         borderWidth: 1,\n            //         borderColor: 'red'\n            //     }}\n            // >\n            //     <div id={id ? `vischart_${id}` : 'demo-chart'} style={{ height: height, width: width }} />\n            // </div>\n            <div id={id ? `vischart_${id}` : 'demo-chart'} style={{ height: \"640\", width: \"640\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", visibility: \"hidden\" }} />\n        )\n    }\n}\n","import React from 'react';\nimport ChartType from '@/constant/ChartType';\nimport getSupportedChartTypes from './getSupportedChartTypes';\nimport Chart from './Chart';\nimport { isValid, customizeFact } from './helper';\nimport _ from 'lodash';\n\nexport const facts2charts = (facts, shema, chartDiversity = 0) => {\n    for (let i = 0; i < facts.length; i++) {\n        let supportedChartTypes = getSupportedChartTypes(shema, facts[i]);\n        let choiceCount = parseInt((supportedChartTypes.length + 1) * chartDiversity);\n        let choicedChartTypes = supportedChartTypes.slice(0, choiceCount + 1);\n        facts[i].chart = choicedChartTypes[Math.floor(Math.random() * choicedChartTypes.length)].chart;\n    }\n    return facts\n}\nexport const getChoice = (length) => {\n    let choice = Math.round(Math.random() * (length - 1));\n    return choice;\n}\n\n\nexport const getFactChartType = (shema, fact, choice = 0) => {\n    let supportedChartTypes = getSupportedChartTypes(fact, shema);\n    if (supportedChartTypes.length === 0) return null;\n    return supportedChartTypes[getChoice(supportedChartTypes.length)].chart;\n}\n\nconst getvischartype = (chart) => {\n    let chartType = chart;\n    switch (chart) {\n        case ChartType.AREA_CHART:\n            chartType = \"areachart\";\n            break;\n        case ChartType.BUBBLE_CHART:\n            chartType = \"bubblechart\";\n            break;\n        case ChartType.COLOR_FILLING_MAP:\n            chartType = \"filledmap\";\n            break;\n        case ChartType.BUBBLE_MAP:\n            chartType = \"bubblemap\";\n            break;\n        case ChartType.HALF_RING_CHART:\n            chartType = \"donutchart\";\n            break;\n        case ChartType.HORIZONTAL_BAR_CHART:\n            chartType = \"horizentalbarchart\";\n            break;\n\n        case ChartType.VERTICAL_BAR_CHART:\n        case ChartType.STACKED_BAR_CHART:\n        case ChartType.VERTICAL_DIFFERENCE_BAR_CHART:\n        case ChartType.ISOTYPE_BAR_CHART:\n        case ChartType.VERTICAL_DIFFERENCE_ARROW_CHART:\n            chartType = \"verticalbarchart\"\n            break;\n        case ChartType.LINE_CHART:\n        case ChartType.STACKED_LINE_CHART:\n            chartType = \"linechart\";\n            break;\n        case ChartType.PROPORTION_ISOTYPE_CHART:\n        case ChartType.PIE_CHART:\n            chartType = \"piechart\";\n            break;\n        case ChartType.PROGRESS_BAR_CHART:\n            chartType = \"progresschart\";\n            break;\n        case ChartType.RING_CHART:\n            chartType = \"donutchart\";\n            break;\n        case ChartType.SCATTER_PLOT:\n            chartType = \"scatterplot\";\n            break;\n        case ChartType.TEXT_CHART:\n            chartType = \"textchart\";\n            break;\n        case ChartType.TREE_MAP:\n            chartType = \"treemap\";\n            break;\n        default:\n            break;\n    }\n    return chartType;\n}\n\nexport const fact2chart = function (specData, containerId, fact, data, size, vegalite) {\n    if (!fact.chart || fact.chart === \"\") {\n        fact.chart = getFactChartType(specData.schema, fact);//针对生成页面的chart\n    }\n\n    let chart = fact.chart;\n\n    if (chart === ChartType.ISOTYPE_BAR_CHART) {\n        fact.chart = ChartType.VERTICAL_BAR_CHART;\n    }\n    fact = customizeFact(fact);//important\n\n    if (!fact.chart || !isValid(fact)) {\n        console.log(\"no valid\", fact)\n        return null;\n    }\n\n    let specChart = {\n        id: containerId,\n        size: size,\n        type: getvischartype(chart),\n        style: \"business\",\n        duration: 0,\n        showSuggestion: false,//显示图表Unsupported,\n        // ...vegalite //add vegalite spec\n    }\n\n    specData = {\n        ...specData,\n        values: data,\n    }\n    let specNew = {\n        data: specData,\n        fact: fact,\n        chart: specChart,\n    }\n    //console.log(\"specNew\",fact.chart,specNew);\n\n    return <Chart spec={_.cloneDeep(specNew)} />\n}\n","import React, { Component } from 'react'\nimport { fact2chart } from '@/tool/fact2vis/fact2vis'\n\n\nexport default class CalliopeChart extends Component {\n    shouldRender = false\n\n    componentWillMount() {\n        //console.log(\"CalliopeChart componentWillMount\");\n        this.shouldRender = true\n    }\n\n    shouldComponentUpdate() {\n        if (this.shouldRender) {\n            this.shouldRender = false//only render once \n            return true\n        }\n        return false\n    }\n\n\n    getSize = () => {\n        return \"large\"\n    }\n\n    render() {\n        //console.log(\"CalliopeChart render\");\n        const { schema, fact, data } = this.props\n        return (\n            <>\n                {\n                    fact2chart({ schema }, fact.id, fact, data, this.getSize())\n                }\n            </>)\n    }\n}"],"sourceRoot":""}
{"version":3,"sources":["constant/FactType.js","constant/ChartType.js","constant/FieldType.js","tool/fact2vis/getSuitableBreakdownList.js","tool/fact2vis/datafilter.js","tool/fact2vis/helper.js","tool/fact2vis/fact2visAllRule.js","tool/fact2vis/fact2visRule.js","tool/fact2vis/getSupportedChartTypes.js","tool/fact2vis/Chart.js","tool/fact2vis/fact2vis.js","sentencer/fact-templates/association.js","sentencer/fact-templates/categorization.js","sentencer/fact-templates/difference.js","sentencer/fact-templates/distribution.js","sentencer/fact-templates/extreme.js","sentencer/fact-templates/outlier.js","sentencer/fact-templates/proportion.js","sentencer/fact-templates/rank.js","sentencer/fact-templates/trend.js","sentencer/fact-templates/value.js","sentencer/fact-templates/index.js","constant/AggregationType.js","sentencer/index.js","tool/helper.js","pages/EditPage/Dashboard/Layout/ChartCard/AnsweredFacts.js"],"names":["VALUE","TREND","CATEGORIZATION","DIFFERENCE","PROPORTION","DISTRIBUTION","RANK","ASSOCIATION","EXTREME","OUTLIER","JUXTAPOSITION","AREA_CHART","VERTICAL_BAR_CHART","VERTICAL_DIFFERENCE_BAR_CHART","VERTICAL_DIFFERENCE_ARROW_CHART","HORIZONTAL_BAR_CHART","PROGRESS_BAR_CHART","STACKED_BAR_CHART","ISOTYPE_BAR_CHART","PROPORTION_ISOTYPE_CHART","COLOR_FILLING_MAP","BUBBLE_CHART","TEXT_CHART","LINE_CHART","STACKED_LINE_CHART","RING_CHART","HALF_RING_CHART","PIE_CHART","SCATTER_PLOT","TREE_MAP","BUBBLE_MAP","NUMERICAL","CATEGORICAL","TEMPORAL","GEOGRAPHICAL","getSuitableBreakdownList","factType","chartType","schema","suitableBreakdownList","fact2visAllRules","filter","x","fact","chart","length","breakdownSets","Set","forEach","breakdownType","type","add","breakdownList","Array","from","s","indexOf","datafilter","data","subspace","filteredData","sub","field","value","isValid","FactType","measure","groupby","focus","customizeFact","newFact","Object","assign","groupbyList","measureList","key","push","gbValueList","getFieldValue","encoding","aggregate","aggregatedRows","getAggregatedRows","measureField","max","reduce","a","b","extremeFocus","extremeValue","newOrder","sort","y","map","d","newOrderValue","n","posQ3","parseInt","posQ1","decimalQ3","decimalQ1","Q3","Q1","Low","Up","outlierIndex","i","groupbyFieldList","getMaxRows","rawData","d3","entries","index","values","aggregation","calculateData","sumData","fill","sumRows","getSumRows","getAverageRows","getMinRows","countData","countRows","getCountRows","fieldName","ChartType","FieldType","fact2visRules","getSupportedChartTypes","supportedChartTypes","isEdit","breakDown","rules","rang","Chart","id","this","props","spec","container","autovis","AutoVis","load","generate","preProps","size","vega_w","width","height","style","display","alignItems","justifyContent","Component","getChoice","Math","round","random","getFactChartType","shema","getvischartype","fact2chart","specData","containerId","vegalite","console","log","specChart","duration","showSuggestion","specNew","_","cloneDeep","templates","pickFactTemplate","association","categorization","difference","distribution","extreme","outlier","proportion","rank","trend","floor","sentence","template","error","SUM","MAX","MIN","AVG","COUNT","plur","require","convertAggregation","aggType","AggregationType","NONE","convertMeasure","toLowerCase","convertGroupby","param","gb","gbWords","split","gbWordIndex","plurWord","replace","formatNum","num","number","floatNum","intNum","toString","toFixed","substr","substring","result","counter","unshift","join","genFactSubspace","hightlightItem","script","parameter","srtEndIndex","srtStartIndex","newScript","hightlight","generatedScript","parameter1","parameter2","parameter3","visSmall","visNodes","Map","captionNodes","renderLayout","AnsweredFacts","layoutNode","React","createRef","onResize","window","addEventListener","setTimeout","updateTreeMapLayout","current","clientWidth","clientHeight","QAID","TreemapSize","preWidth","preHeight","forceUpdate","updateTreemapSize","batchUpdateVis","svgTransformer","newWidth","newHeight","facts","get","visNode","captionNode","visWidth","visHeight","captionH","x0","x1","y0","y1","updateAVis","scale","min","visChart","children","setAttribute","onmouseenter","onmouseleave","_isValidate","_renderedFacts","state","renderNum","count","slice","cachedFact","visCaptionH","theFact","findIndex","setState","weightAdapter","columnNum","innerNum","weightTable","significance","change","event","target","getTreemap","tile","ratio","padding","sum","getSize","setRef","set","setCaptionRef","endEdit","visId","cachedQA","innerHTML","saveCachedDecomposedQA","deleteCard","newCachedQA","parentId","splice","visBox","renderData","leaves","LayoutView","_fact","Number","parseFloat","parameterList","focusValue","toUpperCase","undefined","genFactSentence","position","left","top","className","onClick","ref","contentEditable","suppressContentEditableWarning","onBlur","dangerouslySetInnerHTML","__html","layout"],"mappings":"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","file":"static/js/19.24aafa93.chunk.js","sourcesContent":["export default {\n    VALUE: 'value',\n    TREND: 'trend',\n    CATEGORIZATION: 'categorization',\n    DIFFERENCE: 'difference',\n    PROPORTION: 'proportion',\n    DISTRIBUTION: 'distribution',\n    RANK: 'rank',\n    ASSOCIATION: 'association',\n    EXTREME: 'extreme',\n    OUTLIER: 'outlier'\n}","export default {\n    JUXTAPOSITION: 'juxtaposition',\n    AREA_CHART: 'Area Chart',\n    VERTICAL_BAR_CHART: 'Vertical Bar Chart',\n    VERTICAL_DIFFERENCE_BAR_CHART: 'Vertical Difference Bar Chart',\n    VERTICAL_DIFFERENCE_ARROW_CHART: 'Vertical Difference Arrow Chart',\n    HORIZONTAL_BAR_CHART: 'Horizontal Bar Chart',\n    PROGRESS_BAR_CHART: 'Progress Bar Chart',\n    STACKED_BAR_CHART: 'Stacked Bar Chart',\n    ISOTYPE_BAR_CHART: 'Isotype Bar Chart',\n    PROPORTION_ISOTYPE_CHART: 'Proportion Isotype Chart',\n    COLOR_FILLING_MAP: 'Color Filling Map',\n    BUBBLE_CHART: 'Bubble Chart',\n    TEXT_CHART: 'Text Chart',\n    LINE_CHART: 'Line Chart',\n    STACKED_LINE_CHART: 'Stacked Line Chart',\n    RING_CHART: 'Ring Chart',\n    HALF_RING_CHART: 'Half Ring Chart',\n    PIE_CHART: 'Pie Chart',\n    SCATTER_PLOT: 'Scatter Plot',\n    TREE_MAP: 'Treemap',\n    BUBBLE_MAP: 'Bubblemap'\n}","export default {\n    NUMERICAL: 'numerical',\n    CATEGORICAL: 'categorical',\n    TEMPORAL: 'temporal',\n    GEOGRAPHICAL: 'geographical',\n}","import { fact2visAllRules } from './fact2visAllRule';\n\nconst getSuitableBreakdownList = (factType, chartType, schema) => {\n    //acording to factType ---> filter\n    let suitableBreakdownList = fact2visAllRules.filter(x => x.fact === factType);\n\n    //if has choosed chartType ---> filter\n    if (chartType) {\n        suitableBreakdownList = suitableBreakdownList.filter(x => x.chart === chartType);\n    }\n    if (suitableBreakdownList.length === 0) return [];\n    let breakdownSets = new Set();\n    suitableBreakdownList.forEach(x => {\n        x.breakdownType.forEach(type => {\n            breakdownSets.add(type)\n        })\n    })\n    let breakdownList = Array.from(breakdownSets);\n    //console.log(\"suitableBreakdownList\", breakdownList)\n    let suitableSchema = schema.filter(s => {\n        return breakdownList.indexOf(s.type) !== -1\n    })\n    // suitableSchema = suitableSchema.map(shema => {\n    //     return shema.field\n    // })\n    //console.log(\"suitableSchema\", suitableSchema)\n    return suitableSchema;\n};\nexport default getSuitableBreakdownList;","const datafilter = (data, subspace) => {\n    let filteredData = data;\n    for (const sub of subspace) {\n        filteredData = filteredData.filter((x)=>x[sub.field]===sub.value)\n    }\n    return filteredData\n}\n\nexport default datafilter;","import FactType from '@/constant/FactType'\nimport getSuitableBreakdownList from './getSuitableBreakdownList';\nimport datafilter from './datafilter';\nimport * as d3 from 'd3';\n// import _ from 'lodash';\n\n// chart valid\nexport const isValid = function (fact) {\n    let isValid = false;\n    switch (fact.type) {\n        case FactType.ASSOCIATION:\n            if (fact.measure.length === 2)\n                isValid = true\n            break;\n\n        case FactType.CATEGORIZATION:\n            if (fact.groupby.length)\n                isValid = true\n            break;\n\n        case FactType.DIFFERENCE:\n            if (fact.measure.length && fact.groupby.length && fact.focus.length >= 2)\n                isValid = true\n            break;\n\n        case FactType.DISTRIBUTION:\n            if (fact.measure.length && fact.groupby.length)\n                isValid = true\n            break;\n\n        case FactType.EXTREME:\n            if (fact.measure.length && fact.groupby.length && fact.focus.length)\n                isValid = true\n            break;\n\n        case FactType.OUTLIER:\n            if (fact.measure.length && fact.groupby.length && fact.focus.length)\n                isValid = true\n            break;\n\n        case FactType.PROPORTION:\n            if (fact.measure.length && fact.groupby.length && fact.focus.length)\n                isValid = true\n            break;\n\n        case FactType.RANK:\n            if (fact.measure.length && fact.groupby.length)\n                isValid = true\n            break;\n\n        case FactType.TREND:\n            if (fact.measure.length && fact.groupby.length)\n                isValid = true\n            break;\n\n        case FactType.VALUE:\n            if (fact.measure.length)\n                isValid = true\n            break;\n\n        default:\n            break;\n    }\n    return isValid\n}\n\n/***\n * 清空不必要的fact属性\n ***/\nexport const customizeFact = function (fact, schema, data) {\n    let newFact = Object.assign({}, fact)\n    switch (fact.type) {\n        case FactType.ASSOCIATION:\n            newFact.focus = [];\n            if (schema && data) {\n                const groupbyList = getSuitableBreakdownList(fact.type, fact.chart, schema);\n                if (newFact.groupby.length === 0 && groupbyList.length > 0) {\n                    newFact.groupby = [groupbyList[0].field];\n                }\n                const measureList = schema.filter(key => key['type'] === \"numerical\");\n                if (newFact.measure.length === 0 && measureList.length > 0) {\n                    newFact.measure = [{ \"field\": measureList[0].field, \"aggregate\": \"count\" }];\n                }\n                if (newFact.measure.length === 1) {\n                    newFact.measure.push({ \"field\": 'COUNT', \"aggregate\": \"count\" });\n                }\n            }\n            break;\n\n        case FactType.CATEGORIZATION:\n            newFact.measure = []\n            newFact.focus = []\n            if (schema && data) {\n                const groupbyList = getSuitableBreakdownList(fact.type, fact.chart, schema);\n                if (newFact.groupby.length === 0 && groupbyList.length > 0) {\n                    newFact.groupby = [groupbyList[0].field];\n                }\n            }\n            break;\n\n        case FactType.DIFFERENCE:\n            if (schema && data) {\n                const groupbyList = getSuitableBreakdownList(fact.type, fact.chart, schema),\n                    gbValueList = getFieldValue(data, fact.groupby);\n                if (newFact.groupby.length === 0 && groupbyList.length > 0) {\n                    newFact.groupby = [groupbyList[0].field];\n                }\n                if (newFact.measure.length === 0) {\n                    newFact.measure = [{ \"field\": 'COUNT', \"aggregate\": \"count\" }];\n                }\n                /***** 设默认为第1、2条，并且更新到fact中 *****/\n                if (!newFact.focus.length) {\n                    newFact.focus = [{\n                        field: newFact.groupby[0],\n                        value: gbValueList[0],\n                    },\n                    {\n                        field: newFact.groupby[0],\n                        value: gbValueList[1],\n                    }\n                    ]\n                }\n            }\n            break;\n\n        case FactType.DISTRIBUTION:\n            newFact.focus = []\n            if (schema && data) {\n                const groupbyList = getSuitableBreakdownList(fact.type, fact.chart, schema);\n                if (newFact.groupby.length === 0 && groupbyList.length > 0) {\n                    newFact.groupby = [groupbyList[0].field];\n                }\n                if (newFact.measure.length === 0) {\n                    newFact.measure = [{ \"field\": 'COUNT', \"aggregate\": \"count\" }];\n                }\n            }\n            break;\n\n        case FactType.EXTREME:\n            if (schema && data) {\n                const groupbyList = getSuitableBreakdownList(fact.type, fact.chart, schema);\n                if (newFact.groupby.length === 0 && groupbyList.length > 0) {\n                    newFact.groupby = [groupbyList[0].field];\n                }\n                if (newFact.measure.length === 0) {\n                    newFact.measure = [{ \"field\": 'COUNT', \"aggregate\": \"count\" }];\n                }\n                // aggregation\n                if (newFact.measure.length && newFact.groupby.length) {\n                    let encoding = {}\n                    encoding['y'] = {};\n                    encoding['y']['field'] = newFact.measure[0].field;\n                    encoding['y']['aggregation'] = newFact.measure[0].aggregate;\n                    encoding['x'] = {};\n                    encoding['x']['field'] = newFact.groupby[0];\n                    let filteredData = datafilter(data, newFact.subspace)\n                    let aggregatedRows = getAggregatedRows(filteredData, encoding);\n                    // filter gbValueList\n                    let measureField = newFact.measure[0]['field'];\n                    let max = aggregatedRows.reduce((a, b) => (a[measureField] > b[measureField]) ? a : b);\n\n                    /***** 设默认为max，并且更新到fact中 *****/\n                    if (!newFact.focus.length) {\n                        newFact.focus = [{\n                            field: newFact.groupby[0],\n                            value: max[newFact.groupby[0]],\n                            extremeFocus: 'max',\n                            extremeValue: max[newFact.measure[0].field]\n                        }]\n                    }\n                }\n            }\n            break;\n\n        case FactType.OUTLIER:\n            if (schema && data) {\n                const groupbyList = getSuitableBreakdownList(fact.type, fact.chart, schema);\n                if (newFact.groupby.length === 0 && groupbyList.length > 0) {\n                    newFact.groupby = [groupbyList[0].field];\n                }\n                if (newFact.measure.length === 0) {\n                    newFact.measure = [{ \"field\": 'COUNT', \"aggregate\": \"count\" }];\n                }\n                // aggregation\n                if (newFact.measure.length && newFact.groupby.length) {\n                    let encoding = {}\n                    encoding['y'] = {};\n                    encoding['y']['field'] = newFact.measure[0].field;\n                    encoding['y']['aggregation'] = newFact.measure[0].aggregate;\n                    encoding['x'] = {};\n                    encoding['x']['field'] = newFact.groupby[0];\n                    let filteredData = datafilter(data, newFact.subspace)\n                    let aggregatedRows = getAggregatedRows(filteredData, encoding);\n                    // filter gbValueList\n                    let newOrder = aggregatedRows.sort(function (a, b) { return b[encoding.y.field] - a[encoding.y.field]; }).map(function (d) { return d[encoding.x.field]; })\n                    let newOrderValue = aggregatedRows.sort(function (a, b) { return b[encoding.y.field] - a[encoding.y.field]; }).map(function (d) { return d[encoding.y.field]; })\n\n                    let n = newOrderValue.length\n                    // 整数部分\n                    let posQ3 = parseInt((n - 1) * 0.25)\n                    let posQ1 = parseInt((n - 1) * 0.75)\n                    // 小数部分\n                    let decimalQ3 = (n - 1) * 0.25 - posQ3\n                    let decimalQ1 = (n - 1) * 0.75 - posQ1\n                    let Q3 = newOrderValue[posQ3] + (newOrderValue[posQ3 + 1] - newOrderValue[posQ3]) * decimalQ3\n                    let Q1 = newOrderValue[posQ1] + (newOrderValue[posQ1 + 1] - newOrderValue[posQ1]) * decimalQ1\n\n                    let Low = Q1 - 1.5 * (Q3 - Q1)\n                    let Up = Q3 + 1.5 * (Q3 - Q1)\n                    let outlierIndex = []\n                    newOrderValue.forEach((d, i) => {\n                        if (d > Up || d < Low) {\n                            outlierIndex.push(i)\n                        }\n                    });\n\n                    /***** 设默认为outlier，并且更新到fact中 *****/\n                    if (!newFact.focus.length && outlierIndex.length) {\n                        newFact.focus = [{\n                            field: fact.groupby[0],\n                            value: newOrder[outlierIndex[0]],\n                        }]\n                    }\n                }\n            }\n            break;\n\n        case FactType.PROPORTION:\n            if (schema && data) {\n                const groupbyList = getSuitableBreakdownList(fact.type, fact.chart, schema);\n                if (newFact.groupby.length === 0 && groupbyList.length > 0) {\n                    newFact.groupby = [groupbyList[0].field];\n                }\n\n                if (newFact.measure.length === 0) {\n                    newFact.measure = [{ \"field\": 'COUNT', \"aggregate\": \"count\" }];\n                }\n                if (newFact.measure.length && newFact.groupby.length) {\n                    // aggregation\n                    let encoding = {}\n                    encoding['y'] = {};\n                    encoding['y']['field'] = newFact.measure[0].field;\n                    encoding['y']['aggregation'] = newFact.measure[0].aggregate;\n                    encoding['x'] = {};\n                    encoding['x']['field'] = newFact.groupby[0];\n                    let filteredData = datafilter(data, newFact.subspace)\n                    let aggregatedRows = getAggregatedRows(filteredData, encoding);\n                    // filter gbValueList\n                    let measureField = newFact.measure[0]['field'];\n                    let max = aggregatedRows.reduce((a, b) => (a[measureField] > b[measureField]) ? a : b)\n\n                    /***** 设默认为max，并且更新到fact中 *****/\n                    if (!newFact.focus.length) {\n                        newFact.focus = [{\n                            field: newFact.groupby[0],\n                            value: max[newFact.groupby[0]],\n                        }]\n                    }\n                }\n            }\n            break;\n\n        case FactType.RANK:\n            newFact.focus = []\n            if (schema && data) {\n                const groupbyList = getSuitableBreakdownList(newFact.type, newFact.chart, schema);\n                if (newFact.groupby.length === 0 && groupbyList.length > 0) {\n                    newFact.groupby = [groupbyList[0].field];\n                }\n                if (newFact.measure.length === 0) {\n                    newFact.measure = [{ \"field\": 'COUNT', \"aggregate\": \"count\" }];\n                }\n                // if (newFact.measure.length && newFact.groupby.length) {\n                //     // aggregation\n                //     let encoding = {}\n                //     encoding['y'] = {};\n                //     encoding['y']['field'] = newFact.measure[0].field;\n                //     encoding['y']['aggregation'] = newFact.measure[0].aggregate;\n                //     encoding['x'] = {};\n                //     encoding['x']['field'] = newFact.groupby[0];\n                //     let filteredData = datafilter(data, newFact.subspace)\n                //     let aggregatedRows = getAggregatedRows(filteredData, encoding);\n                //     // filter gbValueList\n                //     let newOrder = aggregatedRows.sort(function (a, b) { return b[encoding.y.field] - a[encoding.y.field]; }).map(function (d) { return d[encoding.x.field]; })\n\n                //     /***** 设默认为前3，并且更新到fact中 *****/\n\n                //     let focus = []\n                //     newOrder.forEach((d, i) => {\n                //         if (i < 3) {\n                //             focus.push({ field: fact.groupby[0], value: d })\n                //         }\n                //     });\n                //     if(!_.isEqual(focus, newFact.focus)){\n                //         newFact.focus = focus;\n                //     }\n                // }\n            }\n            break;\n\n        case FactType.TREND:\n            newFact.focus = [];\n            if (schema && data) {\n                let groupbyList = schema.filter(key => key['type'] === \"temporal\")\n                const groupbyFieldList = groupbyList.map((d) => d.field);\n                if (groupbyList.length === 0) {\n                    newFact.groupby = []\n                } else if (newFact.groupby.length === 0 || groupbyFieldList.indexOf(newFact.groupby[0]) === -1) {\n                    newFact.groupby = [groupbyList[0].field];\n                }\n\n                if (newFact.measure.length === 0) {\n                    newFact.measure = [{ \"field\": 'COUNT', \"aggregate\": \"count\" }];\n                }\n            }\n            break;\n\n        case FactType.VALUE:\n            newFact.groupby = []\n            newFact.focus = []\n            if (schema && data) {\n                if (newFact.measure.length === 0) {\n                    newFact.measure = [{ \"field\": 'COUNT', \"aggregate\": \"count\" }];\n                }\n            }\n            break;\n\n        default:\n            break;\n    }\n    return newFact\n}\n\n// fact valid for score to update(RANK/PROPORTION/OUTLIER/DIFFERENCE)\n//NO USE FOR A MOMENT!!!!!\nexport const isFactValid = function (_fact) {\n    let fact = Object.assign({}, _fact)\n    let isFactValid = false;\n    switch (fact.type) {\n        case FactType.ASSOCIATION:\n            if (fact.measure.length === 2 && fact.groupby)\n                isFactValid = true\n            break;\n\n        case FactType.CATEGORIZATION:\n            if (fact.groupby)\n                isFactValid = true\n            break;\n\n        case FactType.DIFFERENCE:\n            if (fact.measure && fact.groupby && fact.focus.length >= 2)\n                isFactValid = true\n            break;\n\n        case FactType.DISTRIBUTION:\n            if (fact.measure && fact.groupby)\n                isFactValid = true\n            break;\n\n        case FactType.EXTREME:\n            if (fact.measure && fact.groupby)\n                isFactValid = true\n            break;\n\n        case FactType.OUTLIER:\n            if (fact.measure && fact.groupby && fact.focus.length)\n                isFactValid = true\n            break;\n\n        case FactType.PROPORTION:\n            if (fact.measure && fact.groupby && fact.focus.length)\n                isFactValid = true\n            break;\n\n        case FactType.RANK:\n            if (fact.measure.length && fact.groupby.length && fact.focus.length >= 3)\n                isFactValid = true\n            break;\n\n        case FactType.TREND:\n            if (fact.measure && fact.groupby)\n                isFactValid = true\n            break;\n\n        case FactType.VALUE:\n            if (fact.measure)\n                isFactValid = true\n            break;\n\n        default:\n            break;\n    }\n    return isFactValid\n}\n\nconst getCountRows = (rawData, encoding) => {\n    let calculateData = d3.nest().key(d => d[encoding.x.field]).entries(rawData);\n    let countData = new Array(calculateData.length).fill(0);\n    let data = calculateData.map(function (d, i) {\n        d.values.forEach(() => {\n            countData[i] += 1\n        })\n        let countRows = Object.assign({}, d.values[0])\n        countRows['COUNT'] = countData[i]\n        return countRows\n    });\n    return data;\n}\n\nconst getMinRows = (rawData, encoding) => {\n    let calculateData = d3.nest().key(d => d[encoding.x.field]).entries(rawData);\n    let data = calculateData.map(function (d) {\n        let index = d3.scan(d.values, function (a, b) {\n            if (a[encoding.y.field] && b[encoding.y.field])\n                return a[encoding.y.field] - b[encoding.y.field];\n        });\n        if (index >= 0) {\n            return d.values[index]\n        } else {\n            return d.values[0]\n        }\n    });\n    return data;\n}\n\nconst getMaxRows = (rawData, encoding) => {\n    let calculateData = d3.nest().key(d => d[encoding.x.field]).entries(rawData);\n    let data = calculateData.map(function (d, i) {\n        let index = d3.scan(d.values, function (a, b) {\n            if (a[encoding.y.field] && b[encoding.y.field])\n                return b[encoding.y.field] - a[encoding.y.field];\n        });\n        if (index >= 0) {\n            return d.values[index]\n        } else {\n            return d.values[0];\n        }\n    });\n    return data;\n}\n\nconst getSumRows = (rawData, encoding) => {\n    let calculateData = d3.nest().key(d => d[encoding.x.field]).entries(rawData);\n    let sumData = new Array(calculateData.length).fill(0);\n    let data = calculateData.map(function (d, i) {\n        d.values.forEach(d => {\n            sumData[i] += d[encoding.y.field]\n        })\n        let sumRows = Object.assign({}, d.values[0])\n        sumRows[encoding.y.field] = sumData[i]\n        return sumRows\n    });\n    return data;\n}\n\nconst getAverageRows = (rawData, encoding) => {\n    let calculateData = d3.nest().key(d => d[encoding.x.field]).entries(rawData);\n    let sumData = new Array(calculateData.length).fill(0);\n    let data = calculateData.map(function (d, i) {\n        d.values.forEach(d => {\n            sumData[i] += d[encoding.y.field]\n        })\n        let sumRows = Object.assign({}, d.values[0])\n        sumRows[encoding.y.field] = sumData[i] / d.values.length;\n        return sumRows;\n    });\n    return data;\n}\n\nconst getAggregatedRows = (rawData, encoding) => {\n    let data;\n    switch (encoding.y.aggregation) {\n        case 'sum':\n            data = getSumRows(rawData, encoding);\n            break;\n        case 'avg':\n            data = getAverageRows(rawData, encoding);\n            break;\n        case 'max':\n            data = getMaxRows(rawData, encoding);\n            break;\n        case 'min':\n            data = getMinRows(rawData, encoding);\n            break;\n        case 'count':\n            data = getCountRows(rawData, encoding)\n            break;\n\n        default:\n            data = getMaxRows(rawData, encoding);\n            break;\n    }\n    return data;\n}\n\nconst getFieldValue = (rawData, fieldName) => {\n    if (fieldName)\n        return Array.from(new Set(rawData.map(d => d[fieldName])));\n    else return []\n}","import FactType from '@/constant/FactType';\nimport ChartType from '@/constant/ChartType';\nimport FieldType from '@/constant/FieldType';\n//权重\nexport const fact2visAllRules = [\n    //association \n    {\n        \"fact\": FactType.ASSOCIATION,\n        \"chart\": ChartType.SCATTER_PLOT,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL, FieldType.GEOGRAPHICAL]\n    },\n    //outlier\n    {\n        \"fact\": FactType.OUTLIER,\n        \"chart\": ChartType.VERTICAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL, FieldType.GEOGRAPHICAL],\n        //\"rang\": [0, 9]\n    },\n    {\n        \"fact\": FactType.OUTLIER,\n        \"chart\": ChartType.AREA_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL]\n    },\n    {\n        \"fact\": FactType.OUTLIER,\n        \"chart\": ChartType.LINE_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL]\n    },\n    // {\n    //     \"fact\": FactType.OUTLIER,\n    //     \"chart\": ChartType.BUBBLE_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    //     \"rang\": [6, 9]\n    // },\n    // {\n    //     \"fact\": FactType.OUTLIER,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.OUTLIER,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    //extreme\n    {\n        \"fact\": FactType.EXTREME,\n        \"chart\": ChartType.VERTICAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL, FieldType.GEOGRAPHICAL],\n        //\"rang\": [0, 9]\n    },\n    // {\n    //     \"fact\": FactType.EXTREME,\n    //     \"chart\": ChartType.TEXT_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    // },\n    {\n        \"fact\": FactType.EXTREME,\n        \"chart\": ChartType.LINE_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL],\n    },\n    {\n        \"fact\": FactType.EXTREME,\n        \"chart\": ChartType.AREA_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL],\n    },\n    // {\n    //     \"fact\": FactType.EXTREME,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.EXTREME,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    //proportion\n    {\n        \"fact\": FactType.PROPORTION,\n        \"chart\": ChartType.PROGRESS_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL, FieldType.TEMPORAL],\n    },\n    // {\n    //     \"fact\": FactType.PROPORTION,\n    //     \"chart\": ChartType.TREE_MAP,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    // },\n    // {\n    //     \"fact\": FactType.PROPORTION,\n    //     \"chart\": ChartType.RING_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    // },\n    {\n        \"fact\": FactType.PROPORTION,\n        \"chart\": ChartType.PIE_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL, FieldType.TEMPORAL],\n    },\n    // {\n    //     \"fact\": FactType.PROPORTION,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.PROPORTION,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.PROPORTION,\n    //     \"chart\": ChartType.VERTICAL_BAR_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    //     \"rang\": [0, 9]\n    // },\n\n    //rank\n    {\n        \"fact\": FactType.RANK,\n        \"chart\": ChartType.HORIZONTAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL, FieldType.TEMPORAL],\n    },\n    // {\n    //     \"fact\": FactType.RANK,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.RANK,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.RANK,\n    //     \"chart\": ChartType.LINE_CHART,\n    //     \"breakdownType\": [FieldType.TEMPORAL],\n    // },\n    //distribution\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.BUBBLE_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    // },\n    {\n        \"fact\": FactType.DISTRIBUTION,\n        \"chart\": ChartType.AREA_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL],\n    },\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.TREE_MAP,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    //     \"rang\": [6, 10000]\n    // },\n    {\n        \"fact\": FactType.DISTRIBUTION,\n        \"chart\": ChartType.VERTICAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL],\n        //\"rang\": [0, 9]\n    },\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.HORIZONTAL_BAR_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    // },\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.PIE_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    // },\n    //difference\n    // {\n    //     \"fact\": FactType.DIFFERENCE,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.DIFFERENCE,\n    //     \"chart\": ChartType.VERTICAL_BAR_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    //     // \"rang\": [0, 9]\n    // },\n    // {\n    //     \"fact\": FactType.DIFFERENCE,\n    //     \"chart\": ChartType.TEXT_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    // },\n    // {\n    //     \"fact\": FactType.DIFFERENCE,\n    //     \"chart\": ChartType.PIE_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    // },\n    {\n        \"fact\": FactType.DIFFERENCE,\n        \"chart\": ChartType.HORIZONTAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL, FieldType.TEMPORAL],\n    },\n    // //categorization\n    // {\n    //     \"fact\": FactType.CATEGORIZATION,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.CATEGORIZATION,\n    //     \"chart\": ChartType.TREE_MAP,\n    //     \"breakdownType\": [FieldType.CATEGORICAL],\n    //     \"rang\": [6, 10000]\n    // },\n    {\n        \"fact\": FactType.CATEGORIZATION,\n        \"chart\": ChartType.VERTICAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL],\n       // \"rang\": [0, 9]\n    },\n    // {\n    //     \"fact\": FactType.CATEGORIZATION,\n    //     \"chart\": ChartType.BUBBLE_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL],\n    //     \"rang\": [6, 9]\n    // },\n    //trend\n    {\n        \"fact\": FactType.TREND,\n        \"chart\": ChartType.LINE_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL],\n    },\n    // {\n    //     \"fact\": FactType.TREND,\n    //     \"chart\": ChartType.AREA_CHART,\n    //     \"breakdownType\": [FieldType.TEMPORAL],\n    // },\n    // {\n    //     \"fact\": FactType.TREND,\n    //     \"chart\": ChartType.VERTICAL_BAR_CHART,\n    //     //\"rang\": [0, 9],\n    //     \"breakdownType\": [FieldType.TEMPORAL, FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.TREND,\n    //     \"chart\": ChartType.HORIZONTAL_BAR_CHART,\n    //     \"rang\": [0, 9],\n    //     \"breakdownType\": [FieldType.TEMPORAL],\n    // },\n    // {\n    //     \"fact\": FactType.TREND,\n    //     \"chart\": ChartType.BUBBLE_CHART,\n    //     \"rang\": [6, 9],\n    //     \"breakdownType\": [FieldType.TEMPORAL, FieldType.TEMPORAL],\n    // },\n    // {\n    //     \"fact\": FactType.TREND,\n    //     \"chart\": ChartType.SCATTER_PLOT,\n    //     \"breakdownType\": [FieldType.TEMPORAL],\n    // },\n    //value\n    // {\n    //     \"fact\": FactType.VALUE,\n    //     \"chart\": ChartType.TEXT_CHART,\n    //     \"breakdownType\": [],\n    // },\n    // {\n    //     \"fact\": FactType.VALUE,\n    //     \"chart\": ChartType.HORIZONTAL_BAR_CHART,\n    //     \"breakdownType\": [],\n    // },\n    {\n        \"fact\": FactType.VALUE,\n        \"chart\": ChartType.VERTICAL_BAR_CHART,\n        // \"rang\": [0, 9],\n        //\"breakdownType\": [FieldType.TEMPORAL, FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL],\n    },\n    // {\n    //     \"fact\": FactType.VALUE,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [],\n    // },\n    // {\n    //     \"fact\": FactType.VALUE,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [],\n    // }\n]","import FactType from '@/constant/FactType';\nimport ChartType from '@/constant/ChartType';\nimport FieldType from '@/constant/FieldType';\n//权重\nexport const fact2visRules = [\n    //association \n    {\n        \"fact\": FactType.ASSOCIATION,\n        \"chart\": ChartType.SCATTER_PLOT,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL, FieldType.GEOGRAPHICAL]\n    },\n    //outlier\n    // {\n    //     \"fact\": FactType.OUTLIER,\n    //     \"chart\": ChartType.VERTICAL_BAR_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.CATEGORICAL],\n    //     // \"rang\": [0, 9]\n    // },\n    {\n        \"fact\": FactType.OUTLIER,\n        \"chart\": ChartType.AREA_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL]\n    },\n    {\n        \"fact\": FactType.OUTLIER,\n        \"chart\": ChartType.LINE_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL]\n    },\n    // {\n    //     \"fact\": FactType.OUTLIER,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    //     // \"rang\": [0, 9]\n    // },\n    // {\n    //     \"fact\": FactType.OUTLIER,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    //     // \"rang\": [0, 9]\n    // },\n    // {\n    //     \"fact\": FactType.OUTLIER,\n    //     \"chart\": ChartType.BUBBLE_CHART,\n    // \"rang\": [6, 9]\n    // },\n    //extreme\n    {\n        \"fact\": FactType.EXTREME,\n        \"chart\": ChartType.VERTICAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL],\n        // \"rang\": [0, 9]\n    },\n    // {\n    //     \"fact\": FactType.EXTREME,\n    //     \"chart\": ChartType.TEXT_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL],\n    // },\n    {\n        \"fact\": FactType.EXTREME,\n        \"chart\": ChartType.LINE_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL],\n    },\n    {\n        \"fact\": FactType.EXTREME,\n        \"chart\": ChartType.AREA_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL],\n    },\n    // {\n    //     \"fact\": FactType.EXTREME,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.EXTREME,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    //proportion\n    {\n        \"fact\": FactType.PROPORTION,\n        \"chart\": ChartType.PROGRESS_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL],\n    },\n    // {\n    //     \"fact\": FactType.PROPORTION,\n    //     \"chart\": ChartType.RING_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL],\n    // },\n    {\n        \"fact\": FactType.PROPORTION,\n        \"chart\": ChartType.PIE_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL],\n    },\n    // {\n    //     \"fact\": FactType.PROPORTION,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.PROPORTION,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.PROPORTION,\n    //     \"chart\": ChartType.VERTICAL_BAR_CHART,\n    //\"rang\": [0, 9]\n    // },\n    // {\n    //     \"fact\": FactType.PROPORTION,\n    //     \"chart\": ChartType.TEXT_CHART,\n    // },\n\n    //rank\n    {\n        \"fact\": FactType.RANK,\n        \"chart\": ChartType.HORIZONTAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL],\n    },\n    // {\n    //     \"fact\": FactType.RANK,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.RANK,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.RANK,\n    //     \"chart\": ChartType.LINE_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL, FieldType.TEMPORAL],\n    // },\n    //distribution\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    {\n        \"fact\": FactType.DISTRIBUTION,\n        \"chart\": ChartType.AREA_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL],\n    },\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.TREE_MAP,\n    //     \"breakdownType\": [FieldType.CATEGORICAL],\n    //     \"rang\": [6, 10000]\n    // },\n    {\n        \"fact\": FactType.DISTRIBUTION,\n        \"chart\": ChartType.VERTICAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL],\n       // \"rang\": [0, 9]\n    },\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.HORIZONTAL_BAR_CHART,\n    // },\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    // },\n    // {\n    //     \"fact\": FactType.DISTRIBUTION,\n    //     \"chart\": ChartType.PIE_CHART,\n    // },\n    // //difference\n    // {\n    //     \"fact\": FactType.DIFFERENCE,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.DIFFERENCE,\n    //     \"chart\": ChartType.VERTICAL_BAR_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL],\n    // },\n    // {\n    //     \"fact\": FactType.DIFFERENCE,\n    //     \"chart\": ChartType.TEXT_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL],\n    // },\n    // {\n    //     \"fact\": FactType.DIFFERENCE,\n    //     \"chart\": ChartType.PIE_CHART,\n    // },\n    {\n        \"fact\": FactType.DIFFERENCE,\n        \"chart\": ChartType.HORIZONTAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL,FieldType.TEMPORAL],\n    },\n    //categorization\n    // {\n    //     \"fact\": FactType.CATEGORIZATION,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    //     \"breakdownType\": [FieldType.GEOGRAPHICAL],\n    // },\n    // {\n    //     \"fact\": FactType.CATEGORIZATION,\n    //     \"chart\": ChartType.TREE_MAP,\n    //     \"breakdownType\": [FieldType.CATEGORICAL],\n    //     \"rang\": [6, 10000]\n    // },\n    {\n        \"fact\": FactType.CATEGORIZATION,\n        \"chart\": ChartType.VERTICAL_BAR_CHART,\n        \"breakdownType\": [FieldType.CATEGORICAL, FieldType.GEOGRAPHICAL],\n        //\"rang\": [0, 9]\n    },\n    // {\n    //     \"fact\": FactType.CATEGORIZATION,\n    //     \"chart\": ChartType.BUBBLE_CHART,\n    //     \"breakdownType\": [FieldType.CATEGORICAL],\n    //     \"rang\": [6, 9]\n    // },\n    //trend\n    {\n        \"fact\": FactType.TREND,\n        \"chart\": ChartType.LINE_CHART,\n        \"breakdownType\": [FieldType.TEMPORAL],\n    },\n    // {\n    //     \"fact\": FactType.TREND,\n    //     \"chart\": ChartType.AREA_CHART,\n    //     \"breakdownType\": [FieldType.TEMPORAL],\n    // },\n    // {\n    //     \"fact\": FactType.TREND,\n    //     \"chart\": ChartType.VERTICAL_BAR_CHART,\n    //     \"rang\": [0, 9]\n    // },\n    // {\n    //     \"fact\": FactType.TREND,\n    //     \"chart\": ChartType.BUBBLE_CHART,\n    //\"rang\": [6, 9]\n    // },\n\n    //value\n    // {\n    //     \"fact\": FactType.VALUE,\n    //     \"chart\": ChartType.TEXT_CHART,\n    //     \"breakdownType\": [],\n    // },\n    // {\n    //     \"fact\": FactType.VALUE,\n    //     \"chart\": ChartType.HORIZONTAL_BAR_CHART,\n    // },\n    {\n        \"fact\": FactType.VALUE,\n        \"chart\": ChartType.VERTICAL_BAR_CHART,\n    },\n    // {\n    //     \"fact\": FactType.VALUE,\n    //     \"chart\": ChartType.BUBBLE_MAP,\n    // },\n    // {\n    //     \"fact\": FactType.VALUE,\n    //     \"chart\": ChartType.COLOR_FILLING_MAP,\n    // }\n]","import {\n    fact2visRules\n} from './fact2visRule';\nimport {\n    fact2visAllRules\n} from './fact2visAllRule';\nimport FieldType from '@/constant/FieldType';\n\n/****\n * 过滤规则： 根据fact.type 和 breakDown.type 筛选支持的图表\n * 其中isEdit===false表示生成阶段，生成阶段优先在推荐规则中过滤，如果找不到，会在全部支持的规则中过滤\n *     isEdit===ture表示编辑阶段，在全部支持的规则中过滤\n */\n\nconst getSupportedChartTypes = (fact, schema, isEdit = false) => {  \n    \n    let breakDown = schema.filter(s => s[\"field\"] === fact.groupby[0])[0];\n    let supportedChartTypes;\n    let rules = isEdit ? fact2visAllRules : fact2visRules;//fact2visRules是推荐规则 \n    supportedChartTypes = rules.filter(x => x.fact === fact.type);\n    if (breakDown) {\n        supportedChartTypes = supportedChartTypes.filter(x => x.breakdownType.indexOf(breakDown.type) !== -1);\n        if (breakDown.type === FieldType.CATEGORICAL && breakDown.values) {\n            supportedChartTypes = supportedChartTypes.filter(x => {\n                if (!x.rang) {\n                    return true\n                } else {\n                    return breakDown.values.length >= x.rang[0] && breakDown.values.length <= x.rang[1]\n                }\n            });\n        }\n        /*******important**** 找不到推荐的图表，就用可以支持的图表显示*****/\n        if (supportedChartTypes.length === 0 && !isEdit) {\n            supportedChartTypes = getSupportedChartTypes(fact, schema, true)\n        }\n        /*******important the end *********/\n    }\n    //console.log(\"supportedChartTypes\", supportedChartTypes)\n    return supportedChartTypes;\n};\nexport default getSupportedChartTypes;","import React, { Component } from 'react';\nimport { AutoVis } from \"calliope-chart\";\n\nexport default class Chart extends Component {\n\n    componentDidMount() {\n        const { id } = this.props.spec.chart;\n        let spec = this.props.spec;\n        let container = id ? `#vischart_${id}` : \"#demo-chart\";\n        this.autovis = new AutoVis();\n        this.autovis = new AutoVis();\n        this.autovis.container(container);\n        this.autovis.load(spec);\n        this.autovis.generate();\n    }\n\n    componentDidUpdate(preProps) {\n        const { id } = this.props.spec.chart;\n        let spec = this.props.spec;\n        let container = id ? `#vischart_${id}` : \"#demo-chart\";\n        this.autovis = new AutoVis();\n        this.autovis = new AutoVis();\n        this.autovis.container(container);\n        this.autovis.load(spec);\n        this.autovis.generate();\n    }\n\n    render() {\n        let height = 640, width = 640;\n        if (this.props.spec.chart) {\n            let { size, type } = this.props.spec.chart;\n            if (type === 'vegalite') {\n                let vega_w = this.props.spec.chart.width,\n                    vega_h = this.props.spec.chart.height;\n                height = vega_h * 0.5\n                width = vega_w * 0.5\n            } else {\n                switch (size) {\n                    case 'wide':\n                        height = 220;\n                        width = 560;\n                        break;\n                    case 'middle':\n                        height = 200;\n                        width = 360;\n                        break;\n                    case 'small':\n                        height = 150;\n                        width = 235;\n                        break;\n\n                    default:\n                        break;\n                }\n            }\n\n        }\n        //console.log(\"render\", width, height);\n        const { id } = this.props.spec.chart ? this.props.spec.chart : { id: \"demo-chart\" };\n        return (\n            // <div id='frame'\n            //     style={{\n            //         // marginLeft: 60,\n            //         // marginTop: 60,\n            //         height: height,\n            //         width: width,\n            //         borderStyle: 'solid',\n            //         borderWidth: 1,\n            //         borderColor: 'red'\n            //     }}\n            // >\n            //     <div id={id ? `vischart_${id}` : 'demo-chart'} style={{ height: height, width: width }} />\n            // </div>\n            <div id={id ? `vischart_${id}` : 'demo-chart'} style={{ height: \"640\", width: \"640\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }} />\n        )\n    }\n}\n","import React from 'react';\nimport ChartType from '@/constant/ChartType';\nimport getSupportedChartTypes from './getSupportedChartTypes';\nimport Chart from './Chart';\nimport { isValid, customizeFact } from './helper';\nimport _ from 'lodash';\n\nexport const facts2charts = (facts, shema, chartDiversity = 0) => {\n    for (let i = 0; i < facts.length; i++) {\n        let supportedChartTypes = getSupportedChartTypes(shema, facts[i]);\n        let choiceCount = parseInt((supportedChartTypes.length + 1) * chartDiversity);\n        let choicedChartTypes = supportedChartTypes.slice(0, choiceCount + 1);\n        facts[i].chart = choicedChartTypes[Math.floor(Math.random() * choicedChartTypes.length)].chart;\n    }\n    return facts\n}\nexport const getChoice = (length) => {\n    let choice = Math.round(Math.random() * (length - 1));\n    return choice;\n}\n\n\nexport const getFactChartType = (shema, fact, choice = 0) => {\n    let supportedChartTypes = getSupportedChartTypes(fact, shema);\n    if (supportedChartTypes.length === 0) return null;\n    return supportedChartTypes[getChoice(supportedChartTypes.length)].chart;\n}\n\nconst getvischartype = (chart) => {\n    let chartType = chart;\n    switch (chart) {\n        case ChartType.AREA_CHART:\n            chartType = \"areachart\";\n            break;\n        case ChartType.BUBBLE_CHART:\n            chartType = \"bubblechart\";\n            break;\n        case ChartType.COLOR_FILLING_MAP:\n            chartType = \"filledmap\";\n            break;\n        case ChartType.BUBBLE_MAP:\n            chartType = \"bubblemap\";\n            break;\n        case ChartType.HALF_RING_CHART:\n            chartType = \"donutchart\";\n            break;\n        case ChartType.HORIZONTAL_BAR_CHART:\n            chartType = \"horizentalbarchart\";\n            break;\n\n        case ChartType.VERTICAL_BAR_CHART:\n        case ChartType.STACKED_BAR_CHART:\n        case ChartType.VERTICAL_DIFFERENCE_BAR_CHART:\n        case ChartType.ISOTYPE_BAR_CHART:\n        case ChartType.VERTICAL_DIFFERENCE_ARROW_CHART:\n            chartType = \"verticalbarchart\"\n            break;\n        case ChartType.LINE_CHART:\n        case ChartType.STACKED_LINE_CHART:\n            chartType = \"linechart\";\n            break;\n        case ChartType.PROPORTION_ISOTYPE_CHART:\n        case ChartType.PIE_CHART:\n            chartType = \"piechart\";\n            break;\n        case ChartType.PROGRESS_BAR_CHART:\n            chartType = \"progresschart\";\n            break;\n        case ChartType.RING_CHART:\n            chartType = \"donutchart\";\n            break;\n        case ChartType.SCATTER_PLOT:\n            chartType = \"scatterplot\";\n            break;\n        case ChartType.TEXT_CHART:\n            chartType = \"textchart\";\n            break;\n        case ChartType.TREE_MAP:\n            chartType = \"treemap\";\n            break;\n        default:\n            break;\n    }\n    return chartType;\n}\n\nexport const fact2chart = function (specData, containerId, fact, data, size, vegalite) {\n    if (!fact.chart || fact.chart === \"\") {\n        fact.chart = getFactChartType(specData.schema, fact);//针对生成页面的chart\n    }\n\n    let chart = fact.chart;\n\n    if (chart === ChartType.ISOTYPE_BAR_CHART) {\n        fact.chart = ChartType.VERTICAL_BAR_CHART;\n    }\n    fact = customizeFact(fact);//important\n\n    if (!fact.chart || !isValid(fact)) {\n        console.log(\"no valid\", fact)\n        return null;\n    }\n\n    let specChart = {\n        id: containerId,\n        size: size,\n        type: getvischartype(chart),\n        style: \"business\",\n        duration: 0,\n        showSuggestion: false,//显示图表Unsupported,\n        ...vegalite //add vegalite spec\n    }\n\n    specData = {\n        ...specData,\n        values: data,\n    }\n    let specNew = {\n        data: specData,\n        fact: fact,\n        chart: specChart,\n    }\n    //console.log(\"specNew\", fact.chart, specNew);\n\n    return <Chart spec={_.cloneDeep(specNew)} />\n}\n","const templates = [\n    {\n        'id': 0,\n        'template': 'The Pearson correlation between the {{measure1}} and the {{measure2}} is {{parameter}} when {{subspace}}.',\n    },\n    {\n        'id': 1,\n        'template': 'When {{subspace}}, the Pearson correlation coefficient between the {{measure1}} and the {{measure2}} is {{parameter}}.',\n    },\n    {\n        'id': 2,\n        'template': 'When {{subspace}}, the {{measure1}} is correlated with the {{measure2}} and the Person correlation is {{parameter}}.',\n    },\n]\n\nexport default templates;","const templates = [\n    {\n        'id': 0,\n        'template': 'When {{subspace}}, there are {{parameter}} {{groupby}}s: {{no.1}}, {{no.2}}, {{no.3}}, and {{focus}} needs to pay attention.',\n    },\n    {\n        'id': 1,\n        'template': 'When {{subspace}}, the data are grouped into {{parameter}} {{groupby}}s, including {{no.1}}, {{no.2}}, {{no.3}}, among which {{focus}} needs to pay attention.',\n    },\n    {\n        'id': 2,\n        'template': 'The data contain {{parameter}} {{groupby}}s when {{subspace}}, which are {{no.1}}, {{no.2}}, {{no.3}}. {{focus}} needs to pay attention.',\n    },\n]\n\nexport default templates;","const templates = [\n    {\n        'id': 0,\n        'template': 'The difference between {{focus1}} and {{focus2}} regarding to their {{agg}} {{measure}} is {{parameter}} when {{subspace}}.',\n    },\n    {\n        'id': 1,\n        'template': '{{focus1}} and {{focus2}}\\'s difference on the {{agg}} {{measure}} is {{parameter}} when {{subspace}}.',\n    },\n    {\n        'id': 2,\n        'template': 'A comparison between {{focus1}} and {{focus2}} on their {{agg}} {{measure}} shows the difference is {{parameter}} when {{subspace}}.',\n    },\n]\n\nexport default templates;","const templates = [\n    {\n        'id': 0,\n        'template': 'The distribution of the {{agg}} {{measure}} over different {{groupby}}s shows an overview of the data when {{subspace}} and {{focus}} needs to pay attention.',\n    },\n    {\n        'id': 1,\n        'template': 'The distribution of the {{agg}} {{measure}} over different {{groupby}}s shows an overview of the data when {{subspace}} and {{focus}} needs to pay attention.',\n    },\n    {\n        'id': 2,\n        'template': 'The distribution of the {{agg}} {{measure}} over different {{groupby}}s shows an overview of the data when {{subspace}} and {{focus}} needs to pay attention.',\n    },\n]\n\nexport default templates;","const templates = [\n    {\n        'id': 0,\n        'template': 'Given {{subspace}}, the {{focus}} value of the {{agg}} {{measure}} is {{parameter[1]}} when the {{groupby}} is {{parameter[0]}}.',\n    },\n    {\n        'id': 1,\n        'template': 'The {{focus}} {{agg}} {{measure}} value over {{groupby}}s is {{parameter[1]}} when the {{groupby}} is {{parameter[0]}} given {{subspace}}.',\n    },\n    {\n        'id': 2,\n        'template': 'Among all {{groupby}}s, {{parameter[0]}} has the {{focus}} {{agg}} {{measure}} value, which is {{parameter[1]}}, when {{subspace}}.',\n    },\n]\n\nexport default templates;","const templates = [\n    {\n        'id': 0,\n        'template': 'The {{agg}} {{measure}} of {{focus}} is an outlier when compared with that of other {{groupby}}s when {{subspace}}.',\n    },\n    {\n        'id': 1,\n        'template': '{{focus}}\\'s {{agg}} {{measure}} is anomalously different from other {{groupby}}s\\' {{measure}} when {{subspace}}.',\n    },\n    {\n        'id': 2,\n        'template': 'Among various {{groupby}}s, the {{agg}} {{measure}} of {{focus}} is an anomaly when {{subspace}}.',\n    },\n]\n\nexport default templates;","const templates = [\n    {\n        'id': 0,\n        'template': 'The {{focus}} accounts for {{parameter}} of the {{agg}} {{measure}} when {{subspace}}.',\n    },\n    {\n        'id': 1,\n        'template': 'The {{focus}} makes up {{parameter}} of the {{agg}} {{measure}} when {{subspace}}.',\n    },\n    {\n        'id': 2,\n        'template': 'The {{focus}}\\'s {{agg}} {{measure}} takes {{parameter}} of the {{agg}} {{measure}} when {{subspace}}.',\n    },\n]\n\nexport default templates;","const templates = [\n    {\n        'id': 0,\n        'template': 'In the {{agg}} {{measure}} ranking of different {{groupby}}s,  the top three {{groupby}}s are {{no.1}}, {{no.2}}, {{no.3}}, when {{subspace}}.',\n    },\n    {\n        'id': 1,\n        'template': 'The ranking list of the {{groupby}}s ordered by their {{agg}} {{measure}} when {{subspace}}, in which the top three {{groupby}}s are {{no.1}}, {{no.2}}, {{no.3}}.',\n    },\n    {\n        'id': 2,\n        'template': 'When sorting the {{groupby}}s in order based on their {{agg}} {{measure}}, the top three {{groupby}}s are {{no.1}}, {{no.2}}, {{no.3}} when {{subspace}}.',\n    },\n]\n\nexport default templates;","const templates = [\n    {\n        'id': 0,\n        'template': 'The trend of the {{agg}} {{measure}} over {{groupby}}s is {{parameter}} when {{subspace}} and the value of {{focus}} needs to pay attention.',\n    },\n    {\n        'id': 1,\n        'template': 'The {{agg}} {{measure}} over {{groupby}}s shows a/an {{parameter}} trend when {{subspace}} and the value of {{focus}} needs to pay attention.',\n    },\n    {\n        'id': 2,\n        'template': 'The {{agg}} {{measure}} over {{groupby}}s is {{parameter}} when {{subspace}} and the value of {{focus}} needs to pay attention.',\n    },\n]\n\nexport default templates;","const templates = [\n    {\n        'id': 0,\n        'template': 'The {{agg}} {{measure}} is {{parameter}} when {{subspace}}.',\n    },\n    {\n        'id': 1,\n        'template': 'When {{subspace}}, the value of the {{agg}} {{measure}} is {{parameter}}.',\n    },\n    {\n        'id': 2,\n        'template': 'The {{agg}} {{measure}} value is {{parameter}} when {{subspace}}.',\n    },\n]\n\nexport default templates;","import FactType from '../../constant/FactType';\nimport association from './association';\nimport categorization from './categorization';\nimport difference from './difference';\nimport distribution from './distribution';\nimport extreme from './extreme';\nimport outlier from './outlier';\nimport proportion from './proportion';\nimport rank from './rank';\nimport trend from './trend';\nimport value from './value';\n\nconst templateCount = 3;\n\nconst pickFactTemplate = function(type, id=-1) {\n    // pick randomly when id == -1\n    let templates = []\n    switch (type) {\n        case FactType.ASSOCIATION:\n            templates = association;\n            break;\n\n        case FactType.CATEGORIZATION:\n            templates = categorization;\n            break;\n\n        case FactType.DIFFERENCE:\n            templates = difference;\n            break;\n\n        case FactType.DISTRIBUTION:\n            templates = distribution;\n            break;\n\n        case FactType.EXTREME:\n            templates = extreme;\n            break;\n\n        case FactType.OUTLIER:\n            templates = outlier;\n            break;\n\n        case FactType.PROPORTION:\n            templates = proportion;\n            break;\n\n        case FactType.RANK:\n            templates = rank;\n            break;\n\n        case FactType.TREND:\n            templates = trend;\n            break;\n\n        case FactType.VALUE:\n            templates = value;\n            break;\n    \n        default:\n            break;\n    }\n    if (id === -1) {\n        id = Math.floor(Math.random() * 10)%templateCount\n    }\n    let sentence = '';\n    try {\n        sentence = templates[id].template;\n    }\n    catch(error) {\n        console.error(error);\n        console.log('wrong id:'+id)\n    }\n    return sentence;\n}\n\nexport default pickFactTemplate;","export default {\n    SUM: 'sum',\n    MAX: 'max',\n    MIN: 'min',\n    AVG: 'avg',\n    COUNT: 'count',\n    // NONE: 'none'\n}","import pickFactTemplate from './fact-templates';\nimport pickRelationTemplate from './relation-templates';\nimport FactType from '@/constant/FactType'\nimport { isValid } from '@/tool/fact2vis/helper'\nimport AggregationType from '@/constant/AggregationType'\nimport _ from 'lodash'\n\nconst plur = require('plur');\nconst convertAggregation = function (aggType) {\n    switch (aggType) {\n        case AggregationType.SUM:\n            return 'total'\n\n        case AggregationType.MAX:\n            return 'maximum'\n\n        case AggregationType.MIN:\n            return 'minimum'\n\n        case AggregationType.AVG:\n            return 'average'\n\n        case AggregationType.COUNT:\n            return 'count'\n\n        case AggregationType.NONE:\n            return ''\n\n        default:\n            return ''\n    }\n}\n\nconst convertMeasure = function (measure) {\n    if (measure.aggregate === \"count\") return \"\"\n    else return measure.field.toLowerCase();\n}\n\nconst convertGroupby = function (groupby, param = 'single') {\n    let gb = groupby[0]\n\n    if (param === 'single')\n        return gb.toLowerCase()\n    else if (param === 'plural') {\n        if (gb.indexOf(' of ') !== -1) {\n            let gbWords = gb.split(\" \")\n            let gbWordIndex = gbWords.indexOf(\"of\") - 1\n            if (gbWordIndex > -1) {\n                let plurWord = plur(gbWords[gbWordIndex], 2)\n                return gb.replace(gbWords[gbWordIndex], plurWord)\n            }\n        } else\n            return plur(gb, 2).toLowerCase()\n    }\n}\n\n// for value/difference/categorization\nexport const formatNum = function (num) {\n    num = (num || 0).toString();\n    let number = 0,\n        floatNum = '',\n        intNum = '';\n    if (num.indexOf('.') > 0) {\n        num = num.toFixed(2)\n        number = num.indexOf('.');\n        floatNum = num.substr(number);\n        intNum = num.substring(0, number);\n    } else {\n        intNum = num;\n    }\n    let result = [],\n        counter = 0;\n    intNum = intNum.split('');\n\n    for (let i = intNum.length - 1; i >= 0; i--) {\n        counter++;\n        result.unshift(intNum[i]);\n        if (!(counter % 3) && i !== 0) { result.unshift(','); }\n    }\n    return result.join('') + floatNum || '';\n}\n\nconst genFactSubspace = function (fact, template) {\n    let subspace = '';\n    if (fact.subspace.length) {\n        fact.subspace.map((key, i) => { return subspace += `${i === 0 ? ' ' : ' and '}the ${key.field} is ${key.value}` })\n        template = template.replace(\"{{subspace}}\", subspace);\n    } else {\n        template = template.replace(\", when {{subspace}}\", '');\n        template = template.replace(\" when {{subspace}}\", '');\n        template = template.replace(\" in case of {{subspace}}\", '');\n        template = template.replace(\" given {{subspace}}\", '');\n        template = template.replace(\"When {{subspace}}, \", '');\n        template = template.replace(\"Given {{subspace}}, \", '');\n        template = template.replace(\"In case of {{subspace}}, \", '');\n    }\n    return template\n}\n\nexport const genFactSentence = function (_fact) {\n    if (!isValid(_fact))\n        return ''\n    let fact = _.cloneDeep(_fact)\n    let template = pickFactTemplate(fact.type);\n    let aggregate = AggregationType.NONE;\n    if (fact.measure.length > 0) {\n        aggregate = fact.measure[0].aggregate;\n    }\n    switch (fact.type) {\n        case FactType.ASSOCIATION:\n            template = template.replace(\"{{measure1}}\", convertMeasure(fact.measure[0]));\n            template = template.replace(\"{{measure2}}\", convertMeasure(fact.measure[1]));\n            template = template.replace(\"{{agg1}}\", convertAggregation(fact.measure[0].aggregate));\n            template = template.replace(\"{{agg2}}\", convertAggregation(fact.measure[1].aggregate));\n            template = genFactSubspace(fact, template)\n            if (fact.parameter !== '') {\n                template = template.replace(\"{{parameter}}\", formatNum(Number.parseFloat(fact.parameter).toFixed(3)));\n            }\n            break;\n\n        case FactType.CATEGORIZATION:\n            template = template.replace(\"{{groupby}}s\", convertGroupby(fact.groupby, 'plural'));\n            template = template.replace(\"{{groupby}}s\", convertGroupby(fact.groupby, 'plural'));\n            template = genFactSubspace(fact, template)\n            if (fact.parameter.length) {\n                template = template.replace(\"{{parameter}}\", formatNum(fact.parameter.length));\n                let parameterList = ''\n                fact.parameter.forEach((d, i) => {\n                    parameterList += `${i === 0 ? '' : ','} ${d}`\n                });\n                template = template.replace(\"{{no.1}}, {{no.2}}, {{no.3}}\", parameterList);\n                // template = template.replace(\"{{no.1}}\", fact.parameter[0]);\n                // template = template.replace(\"{{no.2}}\", fact.parameter[1]);\n                // if (fact.parameter.length === 3) {\n                //     template = template.replace(\"{{no.3}}\", fact.parameter[2]);\n                // } else if (fact.parameter.length > 3) {\n                //     template = template.replace(\"{{no.3}}\", fact.parameter[2] + ', etc');\n                // } else if (fact.parameter.length === 2) {\n                //     template = template.replace(\", {{no.3}}\", '');\n                // }\n            }\n            if (fact.focus.length) {\n                if (template.indexOf(\". {{focus}}\") > -1) {\n                    let focusValue = fact.focus[0].value.slice(0, 1).toUpperCase() + fact.focus[0].value.slice(1)\n                    template = template.replace(\"{{focus}}\", focusValue);\n                } else {\n                    template = template.replace(\"{{focus}}\", fact.focus[0].value);\n                }\n            } else {\n                template = template.replace(\", and {{focus}} needs to pay attention\", \"\");\n                template = template.replace(\", among which {{focus}} needs to pay attention\", \"\");\n                template = template.replace(\". {{focus}} needs to pay attention\", \"\");\n            }\n            break;\n\n        case FactType.DIFFERENCE:\n            template = template.replace(\"{{measure}}\", convertMeasure(fact.measure[0]));\n            template = template.replace(\"{{agg}}\", convertAggregation(aggregate));\n            if (fact.focus.length >= 2) {\n                template = template.replace(\"{{focus1}}\", fact.focus[0].value);\n                template = template.replace(\"{{focus2}}\", fact.focus[1].value);\n            }\n            template = genFactSubspace(fact, template)\n            if (fact.parameter !== '') template = template.replace(\"{{parameter}}\", formatNum(fact.parameter));\n            break;\n\n        case FactType.DISTRIBUTION:\n            template = template.replace(\"{{measure}}\", convertMeasure(fact.measure[0]));\n            template = template.replace(\"{{measure}}\", convertMeasure(fact.measure[0]));\n            template = template.replace(\"{{agg}}\", convertAggregation(aggregate));\n            template = template.replace(\"{{groupby}}s\", convertGroupby(fact.groupby, 'plural'));\n            template = template.replace(\"{{groupby}}\", convertGroupby(fact.groupby));\n            template = genFactSubspace(fact, template)\n            if (fact.focus.length) {\n                template = template.replace(\"{{focus}}\", fact.focus[0].value);\n            } else {\n                template = template.replace(\" and {{focus}} needs to pay attention\", \"\");\n            }\n            break;\n\n        case FactType.EXTREME:\n            template = template.replace(\"{{measure}}\", convertMeasure(fact.measure[0]));\n            template = template.replace(\"{{agg}}\", convertAggregation(aggregate));\n            template = template.replace(\"{{groupby}}s\", convertGroupby(fact.groupby, 'plural'));\n            template = template.replace(\"{{groupby}}\", convertGroupby(fact.groupby));\n            template = template.replace(\"{{groupby}}\", convertGroupby(fact.groupby));\n            template = genFactSubspace(fact, template)\n            if (fact.focus.length) {\n                if (fact.focus[0].extremeFocus !== undefined && fact.focus[0].extremeValue !== undefined) {\n                    if (fact.focus[0].extremeFocus === 'min') { template = template.replace(\"{{focus}}\", 'minimum'); }\n                    else { template = template.replace(\"{{focus}}\", 'maximum'); }\n                    template = template.replace(\"{{parameter[0]}}\", fact.focus[0].value);\n                    template = template.replace(\"{{parameter[1]}}\", formatNum(Math.round(fact.parameter[1] * 100) / 100));\n\n                } else if (fact.parameter.length) {\n                    if (fact.parameter[0] === 'min') { template = template.replace(\"{{focus}}\", 'minimum'); }\n                    else { template = template.replace(\"{{focus}}\", 'maximum'); }\n                    template = template.replace(\"{{parameter[0]}}\", fact.focus[0].value);\n                    template = template.replace(\"{{parameter[1]}}\", formatNum(fact.parameter[1]));\n                }\n            }\n            break;\n\n        case FactType.OUTLIER:\n            template = template.replace(\"{{measure}}\", convertMeasure(fact.measure[0]));\n            template = template.replace(\"{{measure}}\", convertMeasure(fact.measure[0]));\n            template = template.replace(\"{{groupby}}s\", convertGroupby(fact.groupby, 'plural'));\n            template = template.replace(\"{{agg}}\", convertAggregation(aggregate));\n            template = genFactSubspace(fact, template)\n            if (fact.focus.length) template = template.replace(\"{{focus}}\", fact.focus[0].value);\n            break;\n\n        case FactType.PROPORTION:\n            template = template.replace(\"{{measure}}\", convertMeasure(fact.measure[0]));\n            template = template.replace(\"{{agg}}\", convertAggregation(aggregate));\n            template = template.replace(\"{{measure}}\", convertMeasure(fact.measure[0]));\n            template = template.replace(\"{{agg}}\", convertAggregation(aggregate));\n            template = genFactSubspace(fact, template)\n            if (fact.focus.length) template = template.replace(\"{{focus}}\", fact.focus[0].value);\n            if (fact.parameter) template = template.replace(\"{{parameter}}\", fact.parameter);\n            break;\n\n        case FactType.RANK:\n            template = template.replace(\"{{measure}}\", convertMeasure(fact.measure[0]));\n            template = template.replace(\"{{agg}}\", convertAggregation(aggregate));\n            template = template.replace(\"{{groupby}}s\", convertGroupby(fact.groupby, 'plural'));\n            template = template.replace(\"{{groupby}}s\", convertGroupby(fact.groupby, 'plural'));\n            template = genFactSubspace(fact, template)\n            if (fact.parameter.length >= 3) {\n                template = template.replace(\"{{parameter}}\", formatNum(fact.parameter.length));\n                template = template.replace(\"{{no.1}}\", fact.parameter[0]);\n                template = template.replace(\"{{no.2}}\", fact.parameter[1]);\n                if (fact.parameter.length === 3) {\n                    template = template.replace(\"{{no.3}}\", fact.parameter[2]);\n                } else if (fact.parameter.length > 3) {\n                    template = template.replace(\"{{no.3}}\", fact.parameter[2]);\n                } else if (fact.parameter.length === 2) {\n                    template = template.replace(\", {{no.3}}\", '');\n                }\n            } else {\n                template = ''\n            }\n            break;\n\n        case FactType.TREND:\n        \n            template = template.replace(\"{{measure}}\", convertMeasure(fact.measure[0]));\n            template = template.replace(\"{{agg}}\", convertAggregation(aggregate));\n            template = template.replace(\"{{groupby}}s\", convertGroupby(fact.groupby, 'plural'));\n            template = genFactSubspace(fact, template)\n            if (fact.parameter) {\n                template = template.replace(\"{{parameter}}\", fact.parameter);\n                if (fact.parameter === 'increasing') {\n                    template = template.replace(\"a/an\", 'an');\n                } else {\n                    template = template.replace(\"a/an\", 'a');\n                }\n            }\n            if (fact.focus.length) {\n                template = template.replace(\"{{focus}}\", fact.focus[0].value);\n            } else {\n                template = template.replace(\" and the value of {{focus}} needs to pay attention\", \"\");\n            }\n            break;\n\n        case FactType.VALUE:\n            template = template.replace(\"{{measure}}\", convertMeasure(fact.measure[0]));\n            template = template.replace(\"{{agg}}\", convertAggregation(aggregate));\n            template = genFactSubspace(fact, template)\n            if (fact.focus.length) template = template.replace(\"{{focus}}\", fact.focus[0].value);\n            if (fact.parameter !== '') template = template.replace(\"{{parameter}}\", formatNum(fact.parameter));\n            break;\n\n        default:\n            break;\n    }\n    template = template.slice(0, 1).toUpperCase() + template.slice(1)\n    return template;\n}\n\n\nexport const genStoryText = function (facts, relations) {\n    let template;\n    let storyText = '';\n    let pairLength = parseInt(facts.length / 2)\n    //console.log(\"relations\", facts, relations)\n    for (let i = 0; i < pairLength; i++) {\n        if (facts[i]) {\n            template = pickRelationTemplate(relations[i * 2 + 1])\n            // template = template.replace(\"{{Sentence A}}\", facts[i * 2].script());\n            // template = template.replace(\"{{Sentence B}}\", facts[i * 2 + 1].script());\n            template = template.replace(\"{{Sentence A}}\", facts[i * 2].generatedScript);\n            template = template.replace(\"{{Sentence B}}\", facts[i * 2 + 1].generatedScript);\n            storyText += template + ' '\n        }\n    }\n    if (facts.length % 2) {\n        //storyText += facts[facts.length - 1].script()\n        storyText += facts[facts.length - 1].generatedScript\n    }\n    //console.log(\"storyText\", storyText)\n    return storyText\n}\n\nexport const genSubtitle = function (fact) {\n    let title;\n    if (!isValid(fact))\n        return ''\n\n    title = 'The ' + fact.type\n    switch (fact.type) {\n        case FactType.ASSOCIATION:\n            title += ' of ' + fact.measure[0].field + ' and ' + fact.measure[1].field\n            break;\n        case FactType.CATEGORIZATION:\n            // title += ' of ' + fact.groupby[0]\n            title = fact.groupby[0]\n            break;\n\n        case FactType.DIFFERENCE:\n            title += ' between ' + fact.focus[0].value + ' and ' + fact.focus[1].value\n            break;\n        case FactType.DISTRIBUTION:\n            title += ' of ' + fact.measure[0].field\n            break;\n        case FactType.EXTREME:\n            title += ' of ' + fact.measure[0].field\n            break;\n        case FactType.OUTLIER:\n            title += ' of ' + fact.measure[0].field\n            break;\n        case FactType.PROPORTION:\n            title += ' of ' + fact.focus[0].value\n            break;\n        case FactType.RANK:\n            title += ' of ' + fact.measure[0].field\n            break;\n        case FactType.TREND:\n            title += ' of ' + fact.measure[0].field\n            break;\n        case FactType.VALUE:\n            title = 'The ' + convertAggregation(fact.measure[0].aggregate) + ' ' + fact.measure[0].field\n            break;\n        default:\n            break;\n    }\n    if (fact.subspace.length) {\n        let subspace = '';\n        fact.subspace.map((key, i) => { return subspace += ` in ${key.value}` })\n        title += subspace;\n    }\n\n    return title;\n}\n\nexport const genTitle = function (fileName) {\n    let title;\n    switch (fileName) {\n        case 'CarSales.csv':\n            title = 'Car Sales'\n            break;\n\n        case 'nCoV2020.csv':\n            title = 'COVID-19'\n            break;\n\n        case 'deadstartup.csv':\n            title = 'Startup Failures'\n            break;\n\n        default:\n            if (fileName.indexOf('.') > 0) {\n                let number = fileName.indexOf('.');\n                // let csv = fileName.substr(number);\n                title = fileName.substring(0, number);\n            } else {\n                title = fileName\n            }\n            break;\n    }\n    return title\n}","import FactType from '@/constant/FactType'\nimport { isValid } from './fact2vis/helper'\nimport { formatNum } from '../sentencer/index'\n\nexport const genTitle = function (fileName) {\n    let title;\n    switch (fileName) {\n        case 'CarSales.csv':\n            title = 'Car Sales'\n            break;\n\n        case 'nCoV2020.csv':\n            title = 'COVID-19'\n            break;\n\n        case 'deadstartup.csv':\n            title = 'Startup Failures'\n            break;\n\n        default:\n            if (fileName.indexOf('.') > 0) {\n                let number = fileName.indexOf('.');\n                // let csv = fileName.substr(number);\n                title = fileName.substring(0, number);\n            } else {\n                title = fileName\n            }\n            break;\n    }\n    return title\n}\nconst isEndWithS = (letter) => {\n    if (letter === 's') return true\n    return false\n}\n\nconst hightlightItem = function (script, parameter) {\n    if (script.indexOf(parameter) === -1) return script\n    let srtEndIndex = script.indexOf(parameter) + parameter.length;\n\n    if (isEndWithS(script.substring(srtEndIndex, srtEndIndex + 1))) {\n        srtEndIndex = srtEndIndex + 1 //include s \n    }\n    let srtStartIndex = script.indexOf(parameter);\n    let newScript = script.substring(0, srtEndIndex) + \"</i></span>\" + script.substring(srtEndIndex);\n    newScript = newScript.substring(0, srtStartIndex) + '<span class=\"hightlight\"><i>'+ newScript.substring(srtStartIndex);\n    return newScript\n}\n\nexport const hightlight = function (fact) {\n    if (!isValid(fact))\n        return ''\n    // console.log(\"fact.parameter\", fact);\n    // if (!fact.parameter)\n    //     return fact.generatedScript\n\n    let script = fact.generatedScript\n    // script = hightlightItem(fact.generatedScript, fact.type)\n    // if (fact.breakdown && fact.breakdown[0]) {\n    //     script = hightlightItem(script, fact.breakdown[0].field)\n    // }\n    // if (fact.measure && fact.measure[0]) {\n    //     script = hightlightItem(script, fact.measure[0].field)\n    // }\n\n    // if (fact.subspace && fact.subspace[0]) {\n    //     script = hightlightItem(script, fact.subspace[0].field)\n    // }\n\n    let parameter\n    let newScript\n\n    switch (fact.type) {\n        // TODO: NO template parameter\n        case FactType.ASSOCIATION:\n            newScript = script\n            break;\n\n        case FactType.RANK:\n            let parameter1 = fact.parameter[0];\n            let parameter2 = fact.parameter[1];\n            let parameter3 = fact.parameter[2];\n            newScript = hightlightItem(script, parameter1)\n            if (parameter2) newScript = hightlightItem(newScript, parameter2)\n            if (parameter2 && parameter3) newScript = hightlightItem(newScript, parameter3)\n            break;\n\n        case FactType.VALUE:\n            newScript = hightlightItem(script, fact.measure[0].field.toLowerCase())\n            newScript = hightlightItem(newScript, formatNum(fact.parameter))\n            break;\n\n        case FactType.DIFFERENCE:\n            newScript = hightlightItem(script, fact.measure[0].field.toLowerCase())\n            newScript = hightlightItem(newScript, formatNum(fact.parameter))\n            break;\n        // case FactType.DIFFERENCE:\n        //     parameter = formatNum(fact.parameter);\n        //     newScript = hightlightItem(script, parameter)\n        //  \n        case FactType.RANK:\n            newScript = hightlightItem(script, 'decreasing')\n            break;\n\n        // TODO: NO template parameter\n        case FactType.OUTLIER:\n            newScript = script\n            break;\n        case FactType.EXTREME:\n        case FactType.OUTLIER:\n            newScript = hightlightItem(script, 'maximum')\n            if (fact.parameter[1]) newScript = hightlightItem(newScript, formatNum(fact.parameter[1]))\n            break;\n\n        case FactType.DISTRIBUTION:\n            newScript = script\n            break;\n\n        case FactType.CATEGORIZATION:\n            parameter = fact.parameter.length.toString();\n            newScript = hightlightItem(script, parameter)\n            break;\n\n        default:\n            parameter = fact.parameter;\n            newScript = hightlightItem(script, parameter)\n            break;\n    }\n    return newScript\n}\n\nexport const genSubtitle = function (fact) {\n    let title;\n    if (!isValid(fact))\n        return ''\n\n    title = 'The ' + fact.type\n    switch (fact.type) {\n        case FactType.ASSOCIATION:\n            title += ' of ' + fact.measure[0].field + ' and ' + fact.measure[1].field\n            break;\n        case FactType.CATEGORIZATION:\n            title += ' of ' + fact.groupby[0]\n            break;\n\n        case FactType.DIFFERENCE:\n            title += ' between ' + fact.focus[0].value + ' and ' + fact.focus[1].value\n            break;\n        case FactType.DISTRIBUTION:\n            title += ' of ' + fact.measure[0].field\n            break;\n        case FactType.EXTREME:\n            title += ' of ' + fact.measure[0].field\n            break;\n        case FactType.OUTLIER:\n            title += ' of ' + fact.measure[0].field\n            break;\n        case FactType.PROPORTION:\n            title += ' of ' + fact.focus[0].value\n            break;\n        case FactType.RANK:\n            title += ' of ' + fact.measure[0].field\n            break;\n        case FactType.TREND:\n            title += ' of ' + fact.measure[0].field\n            break;\n        case FactType.VALUE:\n            title += ' of ' + fact.focus[0].value\n            break;\n        default:\n            break;\n    }\n    if (fact.subspace.length) {\n        let subspace = '';\n        fact.subspace.map((key, i) => { return subspace += ` in ${key.value}` })\n        title += subspace;\n    }\n\n    return title;\n}","import React, { Component } from 'react'\nimport { fact2chart } from '@/tool/fact2vis/fact2vis'\nimport { genFactSentence } from '@/sentencer/index'\nimport { hightlight } from '@/tool/helper'\nimport * as d3 from 'd3'\nimport _ from 'lodash';\nimport './AnsweredFacts.less'\n\n\nlet testLayout = [1, 2, 3, 4, 5]\nconst defaultNum = testLayout[4]\n\nconst visSmall = {\n    // width: '235',\n    width: '200',\n    height: '150'\n}\n\nlet visNodes = new Map()\nlet captionNodes = new Map()\nconst maxNum = 5;\nlet renderLayout = null\nlet debounceTimer = null\nexport default class AnsweredFacts extends Component {\n\n    layoutNode = React.createRef()\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            renderNum: defaultNum,\n            count: maxNum,\n            clientWidth: 0,\n            clientHeight: 0,\n            facts: this.props.facts\n        }\n        this.visBox = React.createRef()\n        this.TreemapSize = new Array(this.props.columnNum).fill({\n            preWidth: 0,\n            preHeight: 0\n        })\n    }\n    componentDidMount() {\n        this.updateTreeMapLayout()\n        this.onResize()\n    }\n\n    componentDidUpdate() {\n        this.updateTreeMapLayout()\n    }\n\n    onResize = () => {\n        window.addEventListener('resize', () => {\n            if (debounceTimer) clearTimeout(debounceTimer)\n            setTimeout(() => {\n                this.updateTreeMapLayout()\n            }, 300)\n        })\n    }\n\n    updateTreeMapLayout = () => {\n        //updateTreeMapLayout    \n        if (this.layoutNode.current) {\n            const { clientWidth, clientHeight } = this.layoutNode.current\n            const { QAID } = this.props\n            let { preWidth, preHeight } = this.TreemapSize[QAID]\n\n            if ((clientWidth !== 0 && preWidth !== clientWidth) || (preHeight !== clientHeight && clientHeight !== 0)) {\n                this.forceUpdate()\n                this.updateTreemapSize(QAID, clientWidth, clientHeight) //update cache\n            }\n        }\n        this.batchUpdateVis()\n        this.svgTransformer()\n    }\n\n    updateTreemapSize = (id, newWidth, newHeight) => {\n        this.TreemapSize[id].preWidth = newWidth\n        this.TreemapSize[id].preHeight = newHeight\n    }\n    batchUpdateVis = () => {\n        let { facts } = this.props\n        facts.map((fact, index) => {\n            if (!visNodes.get(fact.id) || !captionNodes.get(fact.id)) return fact\n\n            let visNode = visNodes.get(fact.id).current\n            let captionNode = captionNodes.get(fact.id).current\n            let visWidth = 0, visHeight = 0\n            let captionH = 0;\n\n            if (captionNode) {\n                captionH = captionNode.clientHeight\n            }\n            if (renderLayout && renderLayout[index]) {\n                let { x0, x1, y0, y1 } = renderLayout[index]\n                visWidth = x1 - x0\n                visHeight = y1 - y0 - captionH\n            }\n            if (visWidth === 0 || visHeight === 0) return fact\n\n            if (visNode) {\n                this.svgTransformer(visNode, visWidth, visHeight)\n            }\n            this.updateAVis(fact, visWidth, visHeight, captionH)\n            return fact\n        })\n    }\n\n    svgTransformer = (visNode, visWidth, visHeight) => {\n        if (visNode) {\n            // let scaleX = visWidth / 640,\n            //     scaleY = visHeight / 640;\n            let scale = Math.min(visWidth, visHeight) / 640\n            let marginRotio = 0.9\n            // console.log(_node, scaleX, scaleY);\n            let visChart = visNode.children && visNode.children[0]\n            //visChart && visChart.setAttribute(\"style\", `transform:scale(${scaleX * marginRotio},${scaleY * marginRotio})`)\n            if (visChart) {\n                visChart.setAttribute(\"style\", `transform:scale(${scale * marginRotio})`)\n                visChart.onmouseenter = () => {\n                    const { isEdit } = this.props\n                    visChart.setAttribute(\"style\", `transform:scale(${scale * marginRotio});border:${isEdit ? '1px dashed grey' : ''}`)\n                }\n                visChart.onmouseleave = () => {\n                    visChart.setAttribute(\"style\", `transform:scale(${scale * marginRotio})`)\n                }\n            }\n        }\n    }\n\n    _isValidate = (visWidth, visHeight) => {\n        if ((visWidth && visWidth < visSmall.width) || (visHeight && visHeight < visSmall.height)) {\n            return false\n        }\n        return true\n    }\n    _renderedFacts = (facts) => {\n        const { renderNum, count } = this.state\n        return facts.slice(0, renderNum >= count ? count : renderNum)\n    }\n\n    updateAVis = (cachedFact, visWidth, visHeight, visCaptionH) => {\n        let { width, height, captionH } = cachedFact //get by cache\n        //console.log(\"updateAVis\", cachedFact.id, width, visWidth, height, visHeight);\n\n        if (width !== visWidth || height !== visHeight || captionH !== visCaptionH) {\n            const { facts } = this.props\n            let theFact = facts[facts.findIndex(d => d.id === cachedFact.id)]\n            theFact.width = visWidth\n            theFact.height = visHeight\n            theFact.captionH = visCaptionH\n            //console.log(cachedFact.id, visWidth, visHeight, visCaptionH);\n\n            this.setState({\n                facts\n            })\n        }\n    }\n\n    weightAdapter = (data, columnNum) => {\n        let innerNum = data.children.length\n        let weightTable = []\n        switch (columnNum) {\n            case 1:\n                weightTable = [1]\n                if (innerNum === 2) {\n                    weightTable = [3, 2]\n                } else if (innerNum === 3) {\n                    weightTable = [3, 1.2, 0.8]\n                }\n                break;\n            case 2:\n                weightTable = [1]\n                if (innerNum === 2) {\n                    weightTable = [4, 3]\n                } else if (innerNum === 3) {\n                    weightTable = [6, 3, 2]\n                }\n                break;\n            case 3:\n                weightTable = [1]\n                if (innerNum === 2) {\n                    weightTable = [3, 2]\n                } else if (innerNum === 3) {\n                    weightTable = [3, 1.2, 0.8]\n                }\n                break;\n            case 4:\n                weightTable = [1]\n                if (innerNum === 2) {\n                    weightTable = [3, 2]\n                } else if (innerNum === 3) {\n                    weightTable = [4, 3, 2]\n                }\n                break;\n            default:\n                break;\n        }\n        return {\n            \"children\": data.children.map((fact, index) => {\n                return {\n                    ...fact,\n                    significance: weightTable[index]\n                }\n            })\n        }\n    }\n\n    change = (event) => {\n        this.setState({\n            renderNum: event.target.value\n        })\n    }\n\n    getTreemap = (width, height, data) => {\n        let treemap = d3.treemap()\n            .tile(d3.treemapResquarify.ratio(1))\n            .size([width, height])\n            .padding(3)\n            .round(true)\n            (d3.hierarchy(data)\n                .sum(d => d.significance)\n            )\n        return treemap\n    }\n\n    sort = (data) => {\n        return data.sort((a, b) => b.significance - a.significance)\n    }\n\n    getSize = () => {\n        return \"large\"\n    }\n\n    setRef = (id) => {\n        visNodes.set(id, React.createRef())\n        return visNodes.get(id)\n    }\n    setCaptionRef = (id) => {\n        captionNodes.set(id, React.createRef())\n        return captionNodes.get(id)\n    }\n    endEdit = (visId, fact, index) => {\n        let captionNode = captionNodes.get(visId).current\n        const { cachedQA } = this.props\n        let QAId = parseInt(fact.id.split('QA')[0])\n        cachedQA[QAId].facts[index].script = captionNode.innerHTML\n        this.props.saveCachedDecomposedQA(cachedQA)\n    }\n\n    deleteCard = (fact, index) => {\n        let { cachedQA } = this.props\n        let newCachedQA = _.cloneDeep(cachedQA)\n        let parentId = parseInt(fact.id.split('QA')[0])\n        newCachedQA[parentId] && newCachedQA[parentId].facts.splice(index, 1)\n        if (newCachedQA[parentId] && newCachedQA[parentId].facts.length === 0) {\n            newCachedQA.splice(parentId, 1)\n        }\n        this.props.saveCachedDecomposedQA(newCachedQA)\n    }\n\n    render() {\n\n        let { facts, data, schema, columnNum, isEdit, QAID } = this.props\n        let { preWidth, preHeight } = this.TreemapSize[QAID] ? this.TreemapSize[QAID] : { preWidth: 0, preHeight: 0 }\n\n        let renderData = {\n            children: this._renderedFacts(this.sort(facts))\n        }\n\n        renderLayout = this.getTreemap(preWidth, preHeight, this.weightAdapter(renderData, columnNum)).leaves()\n\n        const LayoutView = ({ index, fact, x, y, width, height }) => {\n\n            let vegalite = {\n                // type: \"vegalite\",\n                // height: fact.height - 100,\n                // width: fact.width - 100,\n                height: 640,\n                width: 640,\n            }\n\n            let script = fact.script ? fact.script : genFactSentence(fact) || \" \"\n            fact.generatedScript = script\n\n            return (\n                <div style={{ position: 'absolute', left: x, top: y, width: width, height: height }}>\n                    <div className='chart-card'>\n                        {\n                            isEdit && <div className='delete' onClick={() => this.deleteCard(fact, index)}></div>\n                        }\n                        <div className='wrapper'>\n                            <div className='vis-box' style={{ height: `calc(100% - ${fact.captionH}px)` }}>\n                                <div className='bound-box' id={fact.id} ref={this.setRef(fact.id)}>\n                                    {\n                                        fact2chart({ schema }, fact.id, fact, data, this.getSize(), { ...vegalite })\n                                    }\n                                </div>\n                            </div>\n                            <div className='caption' contentEditable={isEdit} suppressContentEditableWarning ref={this.setCaptionRef(fact.id, index)} onBlur={() => this.endEdit(fact.id, fact, index)}\n                                //title={script}\n                                dangerouslySetInnerHTML={{ __html: hightlight(fact) }}\n                            ></div>\n                        </div>\n                    </div>\n                </div >)\n        }\n\n\n        return (\n            <div className='inner-auto-layout' ref={this.layoutNode} >\n                {\n                    renderLayout && renderLayout.map((layout, key) => {\n                        return <LayoutView\n                            key={key}\n                            index={key}\n                            fact={layout.data}\n                            x={layout.x0}\n                            y={layout.y0}\n                            width={layout.x1 - layout.x0}\n                            height={layout.y1 - layout.y0}\n                        />\n                    })\n                }\n            </div >\n        )\n    }\n}"],"sourceRoot":""}
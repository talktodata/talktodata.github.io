{"version":3,"sources":["../node_modules/antd/es/_util/reactNode.js","axios/config.js","axios/api.js","../node_modules/antd/es/_util/type.js","pages/DataPage/questionList/QuestionList.js"],"names":["isValidElement","React","cloneElement","element","props","replacement","replaceElement","uploadPrefix","generationUrlPrefix","config","url","uploadData","share","fetch","factScoring","generate","candidateQuestions","formData","a","Promise","reslove","reject","axios","method","data","then","response","status","catch","error","getQuestions","generatePDF","param","tuple","_len","arguments","length","args","Array","_key","QuestionList","state","questions","isLoading","getQuestion","columName","fileName","schema","setState","file_name","column_name","api","question","updateQuestion","history","push","this","nextProps","intl","initDone","className","get","tip","map","q","id","time","key","style","animationDuration","onClick","Component"],"mappings":"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","file":"static/js/28.803115f4.chunk.js","sourcesContent":["import * as React from 'react';\nvar isValidElement = React.isValidElement;\nexport { isValidElement };\nexport function replaceElement(element, replacement, props) {\n  if (!isValidElement(element)) return replacement;\n  return /*#__PURE__*/React.cloneElement(element, typeof props === 'function' ? props(element.props || {}) : props);\n}\nexport function cloneElement(element, props) {\n  return replaceElement(element, element, props);\n}","//let calliopeService = 'calliope-service.idvxlab.com:8004';\nlet calliopeService = 'talk-api.idvxlab.com:8006';\n\nlet uploadPrefix = process.env.NODE_ENV === 'production' ? `https://${calliopeService}` : 'http://localhost:6028';//todo \n//let uploadPrefix = `https://${calliopeService}`\nlet generationUrlPrefix = process.env.NODE_ENV === 'production' ? `https://${calliopeService}` : 'http://localhost:6030';\n//let generationUrlPrefix = `https://${calliopeService}`\n\n\nconst config = {\n    url: {\n        //upload\n        uploadPrefix: uploadPrefix,\n        uploadData: `${uploadPrefix}/upload`,\n        share: `${uploadPrefix}/share`,\n        fetch: `${uploadPrefix}/data/share`,\n        //story generation\n        factScoring: `${generationUrlPrefix}/fact`,\n        generate: `${generationUrlPrefix}/generate`,\n        candidateQuestions: `https://${calliopeService}/column2questions`,\n    }\n}\nexport default config","import config from '@/axios/config';\nimport axios from 'axios';\n\nexport async function uploadData(formData) {\n    return new Promise((reslove, reject) => {\n        axios({\n            method: \"post\",\n            url: `${config.url.uploadData}`,\n            config: {\n                \"headers\": {\n                    'Content-Type': 'multipart/form-data' //application/json; charset=utf-8\n                },\n            },\n            data: formData\n        }).then((response) => {\n            if (response.status >= 400) {\n                reject();\n            } else if (response.status === 200 || response.status === 201 || response.status === 204) {\n                reslove(response.data);\n            } else {\n                reject();\n            }\n        }).catch(error => {\n            reject();\n            //  message.error('error message');\n        })\n    })\n}\n\n\nexport function generate(data) {\n    return axios({\n        method: \"post\",\n        url: `${config.url.generate}`,\n        config: {\n            \"headers\": {\n                'Content-Type': 'application/json; charset=utf-8'\n            },\n        },\n        data: data\n    })\n}\n\nexport function getQuestions(data) {\n    return axios({\n        method: \"post\",\n        url: `${config.url.candidateQuestions}`,\n        config: {\n            \"headers\": {\n                'Content-Type': 'application/json; charset=utf-8'\n            },\n        },\n        data: data\n    })\n}\nexport function factScoring(filename, fact, method) {\n    return axios({\n        \"method\": \"POST\",\n        \"url\": config.url.factScoring,\n        \"headers\": {\n            \"Content-Type\": \"application/json; charset=utf-8\"\n        },\n        \"data\": {\n            \"file_name\": filename,\n            \"fact\": fact,\n            \"method\": method,\n        }\n    })\n}\n\nexport async function shareStory(jsonstring) {\n    return new Promise((reslove, reject) => {\n        axios({\n            method: \"post\",\n            url: `${config.url.share}`,\n            config: {\n                \"headers\": {\n                    'Content-Type': 'application/json; charset=utf-8'\n                },\n            },\n            data: {\n                \"share_json\": jsonstring\n            }\n        }).then((response) => {\n            if (response.status >= 400) {\n                reject();\n            } else if (response.status === 200 || response.status === 201 || response.status === 204) {\n                reslove(response.data);\n            } else {\n                reject();\n            }\n        }).catch(error => {\n            reject();\n            //  message.error('error message');\n        })\n    })\n}\n\nexport async function fetchStory(id) {\n    return axios({\n        method: \"get\",\n        \"url\": `${config.url.fetch}/${id}.json`,\n        config: {\n            \"headers\": {\n                'Content-Type': 'application/json; charset=utf-8'\n            },\n        }\n    })\n}\n/*****\n *技术栈：\n ssr(后端渲染)，koa(koa-views)：模板渲染，渲染出要生成pdf的页面)\n node.js 生成pdf插件 puppeteer：将渲染的页面生成PDF\n koa-send：将生成的PDF返回给前端页面下载 \n * \n data是后端用于渲染页面的数据\n */\nexport function generatePDF(data) {\n    return axios({\n        method: 'post',\n        url: `/generatePDF`,\n        param: {},\n        data: data\n    })\n}\n","// https://stackoverflow.com/questions/46176165/ways-to-get-string-literal-type-of-array-values-without-enum-overhead\nexport var tuple = function tuple() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return args;\n};\nexport var tupleNum = function tupleNum() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return args;\n};","import React, { Component } from 'react'\nimport { Spin } from 'antd';\nimport * as api from '@/axios/api'\n\nimport './QuestionList.less'\n\n\nexport default class QuestionList extends Component {\n\n    state = {\n        questions: [],\n        isLoading: false\n    }\n\n    componentWillMount() {\n        if (this.props.columName === '' && this.props.data.length === 0) return\n        this.getQuestion(this.props.columName)\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.columName !== this.props.columName) {\n            this.getQuestion(nextProps.columName)\n        }\n    }\n    getQuestion = async (columName) => {\n        const { fileName, schema } = this.props\n\n        this.setState({\n            isLoading: true\n        })\n\n        let data = {\n            file_name: fileName,\n            column_name: columName || ' ',\n        }\n        let response = await api.getQuestions(data)\n\n        this.setState({\n            isLoading: false,\n            questions: response.data.length > 0 ? response.data : []\n        })\n    }\n    generate = (question) => {\n        this.props.updateQuestion(question)\n        this.props.history.push('/edit')\n    }\n    render() {\n        const { intl, initDone } = this.props;\n        let { questions, isLoading } = this.state\n\n        return (\n            <>\n                <div className=\"Question\">{initDone && intl.get('qa')}</div>\n                <div className=\"QuestArray\">\n                    {\n                        isLoading ? <Spin tip={initDone && intl.get(\"Loading\")} ></Spin>\n                            :\n                            questions.map((q, id) => {\n                                const time = 0.2 + 0.1 * id;\n                                return <p key={id} className={`p-${id}`} style={{ animationDuration: `${time}s` }} onClick={() => this.generate(q)} >{q}</p>\n                            })\n                    }\n                </div>\n            </>\n        )\n    }\n}"],"sourceRoot":""}